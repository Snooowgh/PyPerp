{
    "address": "0xDfcaEBe8f6ea5E022BeFAFaE8c6Cdae8D4E1094b",
    "abi": [
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "clearingHouse",
            "type": "address"
          }
        ],
        "name": "ClearingHouseChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "exchange",
            "type": "address"
          }
        ],
        "name": "ExchangeChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "trader",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "baseToken",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "base",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "quote",
                "type": "uint256"
              },
              {
                "internalType": "int24",
                "name": "lowerTick",
                "type": "int24"
              },
              {
                "internalType": "int24",
                "name": "upperTick",
                "type": "int24"
              },
              {
                "components": [
                  {
                    "internalType": "int256",
                    "name": "twPremiumX96",
                    "type": "int256"
                  },
                  {
                    "internalType": "int256",
                    "name": "twPremiumDivBySqrtPriceX96",
                    "type": "int256"
                  }
                ],
                "internalType": "struct Funding.Growth",
                "name": "fundingGrowthGlobal",
                "type": "tuple"
              }
            ],
            "internalType": "struct IOrderBook.AddLiquidityParams",
            "name": "params",
            "type": "tuple"
          }
        ],
        "name": "addLiquidity",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "base",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "quote",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "fee",
                "type": "uint256"
              },
              {
                "internalType": "uint128",
                "name": "liquidity",
                "type": "uint128"
              }
            ],
            "internalType": "struct IOrderBook.AddLiquidityResponse",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "candidate",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getClearingHouse",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getExchange",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "baseToken",
            "type": "address"
          },
          {
            "components": [
              {
                "internalType": "int256",
                "name": "twPremiumX96",
                "type": "int256"
              },
              {
                "internalType": "int256",
                "name": "twPremiumDivBySqrtPriceX96",
                "type": "int256"
              }
            ],
            "internalType": "struct Funding.Growth",
            "name": "fundingGrowthGlobal",
            "type": "tuple"
          }
        ],
        "name": "getLiquidityCoefficientInFundingPayment",
        "outputs": [
          {
            "internalType": "int256",
            "name": "liquidityCoefficientInFundingPayment",
            "type": "int256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getMarketRegistry",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "baseToken",
            "type": "address"
          },
          {
            "internalType": "int24",
            "name": "lowerTick",
            "type": "int24"
          },
          {
            "internalType": "int24",
            "name": "upperTick",
            "type": "int24"
          }
        ],
        "name": "getOpenOrder",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint128",
                "name": "liquidity",
                "type": "uint128"
              },
              {
                "internalType": "int24",
                "name": "lowerTick",
                "type": "int24"
              },
              {
                "internalType": "int24",
                "name": "upperTick",
                "type": "int24"
              },
              {
                "internalType": "uint256",
                "name": "lastFeeGrowthInsideX128",
                "type": "uint256"
              },
              {
                "internalType": "int256",
                "name": "lastTwPremiumGrowthInsideX96",
                "type": "int256"
              },
              {
                "internalType": "int256",
                "name": "lastTwPremiumGrowthBelowX96",
                "type": "int256"
              },
              {
                "internalType": "int256",
                "name": "lastTwPremiumDivBySqrtPriceGrowthInsideX96",
                "type": "int256"
              },
              {
                "internalType": "uint256",
                "name": "baseDebt",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "quoteDebt",
                "type": "uint256"
              }
            ],
            "internalType": "struct OpenOrder.Info",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "orderId",
            "type": "bytes32"
          }
        ],
        "name": "getOpenOrderById",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint128",
                "name": "liquidity",
                "type": "uint128"
              },
              {
                "internalType": "int24",
                "name": "lowerTick",
                "type": "int24"
              },
              {
                "internalType": "int24",
                "name": "upperTick",
                "type": "int24"
              },
              {
                "internalType": "uint256",
                "name": "lastFeeGrowthInsideX128",
                "type": "uint256"
              },
              {
                "internalType": "int256",
                "name": "lastTwPremiumGrowthInsideX96",
                "type": "int256"
              },
              {
                "internalType": "int256",
                "name": "lastTwPremiumGrowthBelowX96",
                "type": "int256"
              },
              {
                "internalType": "int256",
                "name": "lastTwPremiumDivBySqrtPriceGrowthInsideX96",
                "type": "int256"
              },
              {
                "internalType": "uint256",
                "name": "baseDebt",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "quoteDebt",
                "type": "uint256"
              }
            ],
            "internalType": "struct OpenOrder.Info",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "baseToken",
            "type": "address"
          }
        ],
        "name": "getOpenOrderIds",
        "outputs": [
          {
            "internalType": "bytes32[]",
            "name": "",
            "type": "bytes32[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "baseToken",
            "type": "address"
          },
          {
            "internalType": "int24",
            "name": "lowerTick",
            "type": "int24"
          },
          {
            "internalType": "int24",
            "name": "upperTick",
            "type": "int24"
          }
        ],
        "name": "getPendingFee",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "baseToken",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "fetchBase",
            "type": "bool"
          }
        ],
        "name": "getTotalOrderDebt",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "address[]",
            "name": "baseTokens",
            "type": "address[]"
          }
        ],
        "name": "getTotalQuoteBalanceAndPendingFee",
        "outputs": [
          {
            "internalType": "int256",
            "name": "totalQuoteAmountInPools",
            "type": "int256"
          },
          {
            "internalType": "uint256",
            "name": "totalPendingFee",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "baseToken",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "fetchBase",
            "type": "bool"
          }
        ],
        "name": "getTotalTokenAmountInPoolAndPendingFee",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "tokenAmount",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "pendingFee",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "address[]",
            "name": "tokens",
            "type": "address[]"
          }
        ],
        "name": "hasOrder",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "marketRegistryArg",
            "type": "address"
          }
        ],
        "name": "initialize",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "maker",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "baseToken",
                "type": "address"
              },
              {
                "internalType": "int24",
                "name": "lowerTick",
                "type": "int24"
              },
              {
                "internalType": "int24",
                "name": "upperTick",
                "type": "int24"
              },
              {
                "internalType": "uint128",
                "name": "liquidity",
                "type": "uint128"
              }
            ],
            "internalType": "struct IOrderBook.RemoveLiquidityParams",
            "name": "params",
            "type": "tuple"
          }
        ],
        "name": "removeLiquidity",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "base",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "quote",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "fee",
                "type": "uint256"
              },
              {
                "internalType": "int256",
                "name": "takerBase",
                "type": "int256"
              },
              {
                "internalType": "int256",
                "name": "takerQuote",
                "type": "int256"
              }
            ],
            "internalType": "struct IOrderBook.RemoveLiquidityResponse",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "baseToken",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "isBaseToQuote",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "shouldUpdateState",
                "type": "bool"
              },
              {
                "internalType": "int256",
                "name": "amount",
                "type": "int256"
              },
              {
                "internalType": "uint160",
                "name": "sqrtPriceLimitX96",
                "type": "uint160"
              },
              {
                "internalType": "uint24",
                "name": "exchangeFeeRatio",
                "type": "uint24"
              },
              {
                "internalType": "uint24",
                "name": "uniswapFeeRatio",
                "type": "uint24"
              },
              {
                "components": [
                  {
                    "internalType": "int256",
                    "name": "twPremiumX96",
                    "type": "int256"
                  },
                  {
                    "internalType": "int256",
                    "name": "twPremiumDivBySqrtPriceX96",
                    "type": "int256"
                  }
                ],
                "internalType": "struct Funding.Growth",
                "name": "globalFundingGrowth",
                "type": "tuple"
              }
            ],
            "internalType": "struct IOrderBook.ReplaySwapParams",
            "name": "params",
            "type": "tuple"
          }
        ],
        "name": "replaySwap",
        "outputs": [
          {
            "components": [
              {
                "internalType": "int24",
                "name": "tick",
                "type": "int24"
              },
              {
                "internalType": "uint256",
                "name": "fee",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "insuranceFundFee",
                "type": "uint256"
              }
            ],
            "internalType": "struct IOrderBook.ReplaySwapResponse",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "clearingHouseArg",
            "type": "address"
          }
        ],
        "name": "setClearingHouse",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "exchangeArg",
            "type": "address"
          }
        ],
        "name": "setExchange",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "setOwner",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amount0Owed",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amount1Owed",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "uniswapV3MintCallback",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "trader",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "baseToken",
            "type": "address"
          },
          {
            "components": [
              {
                "internalType": "int256",
                "name": "twPremiumX96",
                "type": "int256"
              },
              {
                "internalType": "int256",
                "name": "twPremiumDivBySqrtPriceX96",
                "type": "int256"
              }
            ],
            "internalType": "struct Funding.Growth",
            "name": "fundingGrowthGlobal",
            "type": "tuple"
          }
        ],
        "name": "updateFundingGrowthAndLiquidityCoefficientInFundingPayment",
        "outputs": [
          {
            "internalType": "int256",
            "name": "liquidityCoefficientInFundingPayment",
            "type": "int256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "orderId",
            "type": "bytes32"
          },
          {
            "internalType": "int256",
            "name": "base",
            "type": "int256"
          },
          {
            "internalType": "int256",
            "name": "quote",
            "type": "int256"
          }
        ],
        "name": "updateOrderDebt",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "updateOwner",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "transactionHash": "0xb5f4c872c37f5f1db919e1691a30c1b2aeceeb2ec678cfdea63a19e5cd268037",
    "receipt": {
      "to": null,
      "from": "0x849a19c0746fB0d335E02deC0d0B3E057e585176",
      "contractAddress": "0xcEDf20450c307a552F35F7487D83CD81d4063B11",
      "transactionIndex": 0,
      "gasUsed": "5194392",
      "logsBloom": "0x
      "blockHash": "0xbf7a84a955c4dc0e30a9a0234dc7724f3da7e3ea6af56f8bbac6791715a99c92",
      "transactionHash": "0xb5f4c872c37f5f1db919e1691a30c1b2aeceeb2ec678cfdea63a19e5cd268037",
      "logs": [],
      "blockNumber": 513538,
      "cumulativeGasUsed": "5194392",
      "status": 1,
      "byzantium": true
    },
    "args": [],
    "solcInputHash": "79338060ebab6992079a592a0a5c7fd6",
    "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"clearingHouse\",\"type\":\"address\"}],\"name\":\"ClearingHouseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"ExchangeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"twPremiumX96\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"twPremiumDivBySqrtPriceX96\",\"type\":\"int256\"}],\"internalType\":\"struct Funding.Growth\",\"name\":\"fundingGrowthGlobal\",\"type\":\"tuple\"}],\"internalType\":\"struct IOrderBook.AddLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"internalType\":\"struct IOrderBook.AddLiquidityResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClearingHouse\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"twPremiumX96\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"twPremiumDivBySqrtPriceX96\",\"type\":\"int256\"}],\"internalType\":\"struct Funding.Growth\",\"name\":\"fundingGrowthGlobal\",\"type\":\"tuple\"}],\"name\":\"getLiquidityCoefficientInFundingPayment\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"liquidityCoefficientInFundingPayment\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"}],\"name\":\"getOpenOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"lastFeeGrowthInsideX128\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"lastTwPremiumGrowthInsideX96\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastTwPremiumGrowthBelowX96\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastTwPremiumDivBySqrtPriceGrowthInsideX96\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"baseDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct OpenOrder.Info\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"getOpenOrderById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"lastFeeGrowthInsideX128\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"lastTwPremiumGrowthInsideX96\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastTwPremiumGrowthBelowX96\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastTwPremiumDivBySqrtPriceGrowthInsideX96\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"baseDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct OpenOrder.Info\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"getOpenOrderIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"}],\"name\":\"getPendingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fetchBase\",\"type\":\"bool\"}],\"name\":\"getTotalOrderDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"baseTokens\",\"type\":\"address[]\"}],\"name\":\"getTotalQuoteBalanceAndPendingFee\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"totalQuoteAmountInPools\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"totalPendingFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fetchBase\",\"type\":\"bool\"}],\"name\":\"getTotalTokenAmountInPoolAndPendingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"hasOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketRegistryArg\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"internalType\":\"struct IOrderBook.RemoveLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"takerBase\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"takerQuote\",\"type\":\"int256\"}],\"internalType\":\"struct IOrderBook.RemoveLiquidityResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBaseToQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldUpdateState\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"uint24\",\"name\":\"exchangeFeeRatio\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"uniswapFeeRatio\",\"type\":\"uint24\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"twPremiumX96\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"twPremiumDivBySqrtPriceX96\",\"type\":\"int256\"}],\"internalType\":\"struct Funding.Growth\",\"name\":\"globalFundingGrowth\",\"type\":\"tuple\"}],\"internalType\":\"struct IOrderBook.ReplaySwapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"replaySwap\",\"outputs\":[{\"components\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"insuranceFundFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IOrderBook.ReplaySwapResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clearingHouseArg\",\"type\":\"address\"}],\"name\":\"setClearingHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchangeArg\",\"type\":\"address\"}],\"name\":\"setExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Owed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Owed\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3MintCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"twPremiumX96\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"twPremiumDivBySqrtPriceX96\",\"type\":\"int256\"}],\"internalType\":\"struct Funding.Growth\",\"name\":\"fundingGrowthGlobal\",\"type\":\"tuple\"}],\"name\":\"updateFundingGrowthAndLiquidityCoefficientInFundingPayment\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"liquidityCoefficientInFundingPayment\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"base\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quote\",\"type\":\"int256\"}],\"name\":\"updateOrderDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"candidate()\":{\"details\":\"Returns the candidate that can become the owner.\"},\"getLiquidityCoefficientInFundingPayment(address,address,(int256,int256))\":{\"details\":\"this is the view version of updateFundingGrowthAndLiquidityCoefficientInFundingPayment()\",\"returns\":{\"liquidityCoefficientInFundingPayment\":\"the funding payment of all orders/liquidity of a maker\"}},\"getTotalTokenAmountInPoolAndPendingFee(address,address,bool)\":{\"details\":\"the returned quote amount does not include funding payment because      the latter is counted directly toward realizedPnl.      the return value includes maker fee.      please refer to _getTotalTokenAmountInPool() docstring for specs\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setOwner(address)\":{\"details\":\"Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uniswapV3MintCallback(uint256,uint256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the minted liquidity. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\",\"params\":{\"amount0Owed\":\"The amount of token0 due to the pool for the minted liquidity\",\"amount1Owed\":\"The amount of token1 due to the pool for the minted liquidity\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#mint call\"}},\"updateFundingGrowthAndLiquidityCoefficientInFundingPayment(address,address,(int256,int256))\":{\"details\":\"this is the non-view version of getLiquidityCoefficientInFundingPayment()\",\"returns\":{\"liquidityCoefficientInFundingPayment\":\"the funding payment of all orders/liquidity of a maker\"}},\"updateOwner()\":{\"details\":\"Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uniswapV3MintCallback(uint256,uint256,bytes)\":{\"notice\":\"Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OrderBook.sol\":\"OrderBook\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMathUpgradeable {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xe391db37b722a67addfa9fce3101edf44ba68e2e12ae6fd74d68677b04ffd5a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#mint\\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\\ninterface IUniswapV3MintCallback {\\n    /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\\n    /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\\n    function uniswapV3MintCallback(\\n        uint256 amount0Owed,\\n        uint256 amount1Owed,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x27a9725b8f831a92d16380860c3d348a0b926a7f01b34a54ea6eea78cbdbcd6a\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe511530871deaef86692cea9adb6076d26d7b47fd4815ce51af52af981026057\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd53041349718d5bce4a89e87cd911879d41ba42ba3fab0614e5e8b742f352b88\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './FullMath.sol';\\nimport './UnsafeMath.sol';\\nimport './FixedPoint96.sol';\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n            }\\n\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n            uint256 denominator = numerator1 - product;\\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n}\\n\",\"keccak256\":\"0x4f69701d331d364b69a1cda77cd7b983a0079d36ae0e06b0bb1d64ae56c3705e\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/SwapMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './FullMath.sol';\\nimport './SqrtPriceMath.sol';\\n\\n/// @title Computes the result of a swap within ticks\\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\\nlibrary SwapMath {\\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\\n    /// @param liquidity The usable liquidity\\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\\n    /// @return feeAmount The amount of input that will be taken as a fee\\n    function computeSwapStep(\\n        uint160 sqrtRatioCurrentX96,\\n        uint160 sqrtRatioTargetX96,\\n        uint128 liquidity,\\n        int256 amountRemaining,\\n        uint24 feePips\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint160 sqrtRatioNextX96,\\n            uint256 amountIn,\\n            uint256 amountOut,\\n            uint256 feeAmount\\n        )\\n    {\\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\\n        bool exactIn = amountRemaining >= 0;\\n\\n        if (exactIn) {\\n            uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\\n            amountIn = zeroForOne\\n                ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\\n            if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    amountRemainingLessFee,\\n                    zeroForOne\\n                );\\n        } else {\\n            amountOut = zeroForOne\\n                ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\\n            if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    uint256(-amountRemaining),\\n                    zeroForOne\\n                );\\n        }\\n\\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\\n\\n        // get the input/output amounts\\n        if (zeroForOne) {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\\n        } else {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\\n        }\\n\\n        // cap the output amount to not exceed the remaining output amount\\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\\n            amountOut = uint256(-amountRemaining);\\n        }\\n\\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\\n            // we didn't reach the target, so take the remainder of the maximum input as fee\\n            feeAmount = uint256(amountRemaining) - amountIn;\\n        } else {\\n            feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd310be830646d0d55bef86683847577f742704d227471ad7b4cab3df9c47cf7\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0x1f864a2bf61ba05f3173eaf2e3f94c5e1da4bec0554757527b6d1ef1fe439e4e\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            FullMath.mulDiv(\\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\\n                sqrtRatioBX96 - sqrtRatioAX96,\\n                sqrtRatioBX96\\n            ) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf149581d28e1c81736dfe72be73ee1301d4945340cc6282fcdd63fe3c85abf24\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        factory,\\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/OrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { SignedSafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { TickMath } from \\\"@uniswap/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport { SwapMath } from \\\"@uniswap/v3-core/contracts/libraries/SwapMath.sol\\\";\\nimport { LiquidityMath } from \\\"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol\\\";\\nimport { FixedPoint128 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol\\\";\\nimport { IUniswapV3MintCallback } from \\\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol\\\";\\nimport { LiquidityAmounts } from \\\"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport { UniswapV3Broker } from \\\"./lib/UniswapV3Broker.sol\\\";\\nimport { PerpSafeCast } from \\\"./lib/PerpSafeCast.sol\\\";\\nimport { PerpFixedPoint96 } from \\\"./lib/PerpFixedPoint96.sol\\\";\\nimport { Funding } from \\\"./lib/Funding.sol\\\";\\nimport { PerpMath } from \\\"./lib/PerpMath.sol\\\";\\nimport { Tick } from \\\"./lib/Tick.sol\\\";\\nimport { ClearingHouseCallee } from \\\"./base/ClearingHouseCallee.sol\\\";\\nimport { UniswapV3CallbackBridge } from \\\"./base/UniswapV3CallbackBridge.sol\\\";\\nimport { IMarketRegistry } from \\\"./interface/IMarketRegistry.sol\\\";\\nimport { OrderBookStorageV1 } from \\\"./storage/OrderBookStorage.sol\\\";\\nimport { IOrderBook } from \\\"./interface/IOrderBook.sol\\\";\\nimport { OpenOrder } from \\\"./lib/OpenOrder.sol\\\";\\n\\n// never inherit any new stateful contract. never change the orders of parent stateful contracts\\ncontract OrderBook is\\n    IOrderBook,\\n    IUniswapV3MintCallback,\\n    ClearingHouseCallee,\\n    UniswapV3CallbackBridge,\\n    OrderBookStorageV1\\n{\\n    using SafeMathUpgradeable for uint256;\\n    using SafeMathUpgradeable for uint128;\\n    using SignedSafeMathUpgradeable for int256;\\n    using PerpMath for uint256;\\n    using PerpMath for uint160;\\n    using PerpMath for int256;\\n    using PerpMath for int128;\\n    using PerpSafeCast for uint256;\\n    using PerpSafeCast for uint128;\\n    using PerpSafeCast for int256;\\n    using Tick for mapping(int24 => Tick.GrowthInfo);\\n\\n    //\\n    // STRUCT\\n    //\\n\\n    struct InternalAddLiquidityToOrderParams {\\n        address maker;\\n        address baseToken;\\n        address pool;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint256 feeGrowthGlobalX128;\\n        uint128 liquidity;\\n        uint256 base;\\n        uint256 quote;\\n        Funding.Growth globalFundingGrowth;\\n    }\\n\\n    struct InternalRemoveLiquidityParams {\\n        address maker;\\n        address baseToken;\\n        address pool;\\n        bytes32 orderId;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint128 liquidity;\\n    }\\n\\n    struct InternalSwapStep {\\n        uint160 initialSqrtPriceX96;\\n        int24 nextTick;\\n        bool isNextTickInitialized;\\n        uint160 nextSqrtPriceX96;\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        uint256 fee;\\n    }\\n\\n    //\\n    // EXTERNAL NON-VIEW\\n    //\\n\\n    function initialize(address marketRegistryArg) external initializer {\\n        __ClearingHouseCallee_init();\\n        __UniswapV3CallbackBridge_init(marketRegistryArg);\\n    }\\n\\n    function setExchange(address exchangeArg) external onlyOwner {\\n        _exchange = exchangeArg;\\n        emit ExchangeChanged(exchangeArg);\\n    }\\n\\n    function addLiquidity(AddLiquidityParams calldata params) external override returns (AddLiquidityResponse memory) {\\n        _requireOnlyClearingHouse();\\n        address pool = IMarketRegistry(_marketRegistry).getPool(params.baseToken);\\n        uint256 feeGrowthGlobalX128 = _feeGrowthGlobalX128Map[params.baseToken];\\n        mapping(int24 => Tick.GrowthInfo) storage tickMap = _growthOutsideTickMap[params.baseToken];\\n        UniswapV3Broker.AddLiquidityResponse memory response;\\n\\n        {\\n            bool initializedBeforeLower = UniswapV3Broker.getIsTickInitialized(pool, params.lowerTick);\\n            bool initializedBeforeUpper = UniswapV3Broker.getIsTickInitialized(pool, params.upperTick);\\n\\n            // add liquidity to pool\\n            response = UniswapV3Broker.addLiquidity(\\n                UniswapV3Broker.AddLiquidityParams(\\n                    pool,\\n                    params.lowerTick,\\n                    params.upperTick,\\n                    params.base,\\n                    params.quote,\\n                    abi.encode(MintCallbackData(params.trader, pool))\\n                )\\n            );\\n\\n            (, int24 currentTick, , , , , ) = UniswapV3Broker.getSlot0(pool);\\n            // initialize tick info\\n            if (!initializedBeforeLower && UniswapV3Broker.getIsTickInitialized(pool, params.lowerTick)) {\\n                tickMap.initialize(\\n                    params.lowerTick,\\n                    currentTick,\\n                    Tick.GrowthInfo(\\n                        feeGrowthGlobalX128,\\n                        params.fundingGrowthGlobal.twPremiumX96,\\n                        params.fundingGrowthGlobal.twPremiumDivBySqrtPriceX96\\n                    )\\n                );\\n            }\\n            if (!initializedBeforeUpper && UniswapV3Broker.getIsTickInitialized(pool, params.upperTick)) {\\n                tickMap.initialize(\\n                    params.upperTick,\\n                    currentTick,\\n                    Tick.GrowthInfo(\\n                        feeGrowthGlobalX128,\\n                        params.fundingGrowthGlobal.twPremiumX96,\\n                        params.fundingGrowthGlobal.twPremiumDivBySqrtPriceX96\\n                    )\\n                );\\n            }\\n        }\\n\\n        // state changes; if adding liquidity to an existing order, get fees accrued\\n        uint256 fee =\\n            _addLiquidityToOrder(\\n                InternalAddLiquidityToOrderParams({\\n                    maker: params.trader,\\n                    baseToken: params.baseToken,\\n                    pool: pool,\\n                    lowerTick: params.lowerTick,\\n                    upperTick: params.upperTick,\\n                    feeGrowthGlobalX128: feeGrowthGlobalX128,\\n                    liquidity: response.liquidity,\\n                    base: response.base,\\n                    quote: response.quote,\\n                    globalFundingGrowth: params.fundingGrowthGlobal\\n                })\\n            );\\n\\n        return\\n            AddLiquidityResponse({\\n                base: response.base,\\n                quote: response.quote,\\n                fee: fee,\\n                liquidity: response.liquidity\\n            });\\n    }\\n\\n    function removeLiquidity(RemoveLiquidityParams calldata params)\\n        external\\n        override\\n        returns (RemoveLiquidityResponse memory)\\n    {\\n        _requireOnlyClearingHouse();\\n        address pool = IMarketRegistry(_marketRegistry).getPool(params.baseToken);\\n        bytes32 orderId = OpenOrder.calcOrderKey(params.maker, params.baseToken, params.lowerTick, params.upperTick);\\n        return\\n            _removeLiquidity(\\n                InternalRemoveLiquidityParams({\\n                    maker: params.maker,\\n                    baseToken: params.baseToken,\\n                    pool: pool,\\n                    orderId: orderId,\\n                    lowerTick: params.lowerTick,\\n                    upperTick: params.upperTick,\\n                    liquidity: params.liquidity\\n                })\\n            );\\n    }\\n\\n    /// @inheritdoc IOrderBook\\n    function updateFundingGrowthAndLiquidityCoefficientInFundingPayment(\\n        address trader,\\n        address baseToken,\\n        Funding.Growth memory fundingGrowthGlobal\\n    ) external override returns (int256 liquidityCoefficientInFundingPayment) {\\n        bytes32[] memory orderIds = _openOrderIdsMap[trader][baseToken];\\n        mapping(int24 => Tick.GrowthInfo) storage tickMap = _growthOutsideTickMap[baseToken];\\n        address pool = IMarketRegistry(_marketRegistry).getPool(baseToken);\\n\\n        // funding of liquidity coefficient\\n        uint256 orderIdLength = orderIds.length;\\n        (, int24 tick, , , , , ) = UniswapV3Broker.getSlot0(pool);\\n        for (uint256 i = 0; i < orderIdLength; i++) {\\n            OpenOrder.Info storage order = _openOrderMap[orderIds[i]];\\n            Tick.FundingGrowthRangeInfo memory fundingGrowthRangeInfo =\\n                tickMap.getAllFundingGrowth(\\n                    order.lowerTick,\\n                    order.upperTick,\\n                    tick,\\n                    fundingGrowthGlobal.twPremiumX96,\\n                    fundingGrowthGlobal.twPremiumDivBySqrtPriceX96\\n                );\\n\\n            // the calculation here is based on cached values\\n            liquidityCoefficientInFundingPayment = liquidityCoefficientInFundingPayment.add(\\n                Funding.calcLiquidityCoefficientInFundingPaymentByOrder(order, fundingGrowthRangeInfo)\\n            );\\n\\n            // thus, state updates have to come after\\n            order.lastTwPremiumGrowthInsideX96 = fundingGrowthRangeInfo.twPremiumGrowthInsideX96;\\n            order.lastTwPremiumGrowthBelowX96 = fundingGrowthRangeInfo.twPremiumGrowthBelowX96;\\n            order.lastTwPremiumDivBySqrtPriceGrowthInsideX96 = fundingGrowthRangeInfo\\n                .twPremiumDivBySqrtPriceGrowthInsideX96;\\n        }\\n\\n        return liquidityCoefficientInFundingPayment;\\n    }\\n\\n    function updateOrderDebt(\\n        bytes32 orderId,\\n        int256 base,\\n        int256 quote\\n    ) external override {\\n        _requireOnlyClearingHouse();\\n        OpenOrder.Info storage openOrder = _openOrderMap[orderId];\\n        openOrder.baseDebt = openOrder.baseDebt.toInt256().add(base).toUint256();\\n        openOrder.quoteDebt = openOrder.quoteDebt.toInt256().add(quote).toUint256();\\n    }\\n\\n    /// @inheritdoc IUniswapV3MintCallback\\n    function uniswapV3MintCallback(\\n        uint256 amount0Owed,\\n        uint256 amount1Owed,\\n        bytes calldata data\\n    ) external override checkCallback {\\n        IUniswapV3MintCallback(_clearingHouse).uniswapV3MintCallback(amount0Owed, amount1Owed, data);\\n    }\\n\\n    function replaySwap(ReplaySwapParams memory params) external override returns (ReplaySwapResponse memory) {\\n        // OB_OEX: only exchange\\n        require(_msgSender() == _exchange, \\\"OB_OEX\\\");\\n        address pool = IMarketRegistry(_marketRegistry).getPool(params.baseToken);\\n        bool isExactInput = params.amount > 0;\\n        uint24 insuranceFundFeeRatio =\\n            IMarketRegistry(_marketRegistry).getMarketInfo(params.baseToken).insuranceFundFeeRatio;\\n        uint256 fee;\\n        uint256 insuranceFundFee; // insuranceFundFee = fee * insuranceFundFeeRatio\\n\\n        UniswapV3Broker.SwapState memory swapState =\\n            UniswapV3Broker.getSwapState(pool, params.amount, _feeGrowthGlobalX128Map[params.baseToken]);\\n\\n        params.sqrtPriceLimitX96 = params.sqrtPriceLimitX96 == 0\\n            ? (params.isBaseToQuote ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\\n            : params.sqrtPriceLimitX96;\\n\\n        // if there is residue in amountSpecifiedRemaining, makers can get a tiny little bit less than expected,\\n        // which is safer for the system\\n        int24 tickSpacing = UniswapV3Broker.getTickSpacing(pool);\\n\\n        while (swapState.amountSpecifiedRemaining != 0 && swapState.sqrtPriceX96 != params.sqrtPriceLimitX96) {\\n            InternalSwapStep memory step;\\n            step.initialSqrtPriceX96 = swapState.sqrtPriceX96;\\n\\n            // find next tick\\n            // note the search is bounded in one word\\n            (step.nextTick, step.isNextTickInitialized) = UniswapV3Broker.getNextInitializedTickWithinOneWord(\\n                pool,\\n                swapState.tick,\\n                tickSpacing,\\n                params.isBaseToQuote\\n            );\\n\\n            // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\\n            if (step.nextTick < TickMath.MIN_TICK) {\\n                step.nextTick = TickMath.MIN_TICK;\\n            } else if (step.nextTick > TickMath.MAX_TICK) {\\n                step.nextTick = TickMath.MAX_TICK;\\n            }\\n\\n            // get the next price of this step (either next tick's price or the ending price)\\n            // use sqrtPrice instead of tick is more precise\\n            step.nextSqrtPriceX96 = TickMath.getSqrtRatioAtTick(step.nextTick);\\n\\n            // find the next swap checkpoint\\n            // (either reached the next price of this step, or exhausted remaining amount specified)\\n            (swapState.sqrtPriceX96, step.amountIn, step.amountOut, step.fee) = SwapMath.computeSwapStep(\\n                swapState.sqrtPriceX96,\\n                (\\n                    params.isBaseToQuote\\n                        ? step.nextSqrtPriceX96 < params.sqrtPriceLimitX96\\n                        : step.nextSqrtPriceX96 > params.sqrtPriceLimitX96\\n                )\\n                    ? params.sqrtPriceLimitX96\\n                    : step.nextSqrtPriceX96,\\n                swapState.liquidity,\\n                swapState.amountSpecifiedRemaining,\\n                // isBaseToQuote: fee is charged in base token in uniswap pool; thus, use uniswapFeeRatio to replay\\n                // !isBaseToQuote: fee is charged in quote token in clearing house; thus, use exchangeFeeRatioRatio\\n                params.isBaseToQuote ? params.uniswapFeeRatio : params.exchangeFeeRatio\\n            );\\n\\n            // user input 1 quote:\\n            // quote token to uniswap ===> 1*0.98/0.99 = 0.98989899\\n            // fee = 0.98989899 * 2% = 0.01979798\\n            if (isExactInput) {\\n                swapState.amountSpecifiedRemaining = swapState.amountSpecifiedRemaining.sub(\\n                    step.amountIn.add(step.fee).toInt256()\\n                );\\n            } else {\\n                swapState.amountSpecifiedRemaining = swapState.amountSpecifiedRemaining.add(step.amountOut.toInt256());\\n            }\\n\\n            // update CH's global fee growth if there is liquidity in this range\\n            // note CH only collects quote fee when swapping base -> quote\\n            if (swapState.liquidity > 0) {\\n                if (params.isBaseToQuote) {\\n                    step.fee = FullMath.mulDivRoundingUp(step.amountOut, params.exchangeFeeRatio, 1e6);\\n                }\\n\\n                fee += step.fee;\\n                uint256 stepInsuranceFundFee = FullMath.mulDivRoundingUp(step.fee, insuranceFundFeeRatio, 1e6);\\n                insuranceFundFee += stepInsuranceFundFee;\\n                uint256 stepMakerFee = step.fee.sub(stepInsuranceFundFee);\\n                swapState.feeGrowthGlobalX128 += FullMath.mulDiv(stepMakerFee, FixedPoint128.Q128, swapState.liquidity);\\n            }\\n\\n            if (swapState.sqrtPriceX96 == step.nextSqrtPriceX96) {\\n                // we have reached the tick's boundary\\n                if (step.isNextTickInitialized) {\\n                    if (params.shouldUpdateState) {\\n                        // update the tick if it has been initialized\\n                        mapping(int24 => Tick.GrowthInfo) storage tickMap = _growthOutsideTickMap[params.baseToken];\\n                        // according to the above updating logic,\\n                        // if isBaseToQuote, state.feeGrowthGlobalX128 will be updated; else, will never be updated\\n                        tickMap.cross(\\n                            step.nextTick,\\n                            Tick.GrowthInfo({\\n                                feeX128: swapState.feeGrowthGlobalX128,\\n                                twPremiumX96: params.globalFundingGrowth.twPremiumX96,\\n                                twPremiumDivBySqrtPriceX96: params.globalFundingGrowth.twPremiumDivBySqrtPriceX96\\n                            })\\n                        );\\n                    }\\n\\n                    int128 liquidityNet = UniswapV3Broker.getTickLiquidityNet(pool, step.nextTick);\\n                    if (params.isBaseToQuote) liquidityNet = liquidityNet.neg128();\\n                    swapState.liquidity = LiquidityMath.addDelta(swapState.liquidity, liquidityNet);\\n                }\\n\\n                swapState.tick = params.isBaseToQuote ? step.nextTick - 1 : step.nextTick;\\n            } else if (swapState.sqrtPriceX96 != step.initialSqrtPriceX96) {\\n                // update state.tick corresponding to the current price if the price has changed in this step\\n                swapState.tick = TickMath.getTickAtSqrtRatio(swapState.sqrtPriceX96);\\n            }\\n        }\\n        if (params.shouldUpdateState) {\\n            // update global states since swap state transitions are all done\\n            _feeGrowthGlobalX128Map[params.baseToken] = swapState.feeGrowthGlobalX128;\\n        }\\n\\n        return ReplaySwapResponse({ tick: swapState.tick, fee: fee, insuranceFundFee: insuranceFundFee });\\n    }\\n\\n    //\\n    // EXTERNAL VIEW\\n    //\\n\\n    /// @inheritdoc IOrderBook\\n    function getExchange() external view override returns (address) {\\n        return _exchange;\\n    }\\n\\n    function getOpenOrderIds(address trader, address baseToken) external view override returns (bytes32[] memory) {\\n        return _openOrderIdsMap[trader][baseToken];\\n    }\\n\\n    function getOpenOrderById(bytes32 orderId) external view override returns (OpenOrder.Info memory) {\\n        return _openOrderMap[orderId];\\n    }\\n\\n    function getOpenOrder(\\n        address trader,\\n        address baseToken,\\n        int24 lowerTick,\\n        int24 upperTick\\n    ) external view override returns (OpenOrder.Info memory) {\\n        return _openOrderMap[OpenOrder.calcOrderKey(trader, baseToken, lowerTick, upperTick)];\\n    }\\n\\n    function hasOrder(address trader, address[] calldata tokens) external view override returns (bool) {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (_openOrderIdsMap[trader][tokens[i]].length > 0) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function getTotalQuoteBalanceAndPendingFee(address trader, address[] calldata baseTokens)\\n        external\\n        view\\n        override\\n        returns (int256 totalQuoteAmountInPools, uint256 totalPendingFee)\\n    {\\n        for (uint256 i = 0; i < baseTokens.length; i++) {\\n            address baseToken = baseTokens[i];\\n            (int256 makerQuoteBalance, uint256 pendingFee) =\\n                _getMakerQuoteBalanceAndPendingFee(trader, baseToken, false);\\n            totalQuoteAmountInPools = totalQuoteAmountInPools.add(makerQuoteBalance);\\n            totalPendingFee = totalPendingFee.add(pendingFee);\\n        }\\n        return (totalQuoteAmountInPools, totalPendingFee);\\n    }\\n\\n    /// @inheritdoc IOrderBook\\n    function getTotalTokenAmountInPoolAndPendingFee(\\n        address trader,\\n        address baseToken,\\n        bool fetchBase // true: fetch base amount, false: fetch quote amount\\n    ) external view override returns (uint256 tokenAmount, uint256 pendingFee) {\\n        (tokenAmount, pendingFee) = _getTotalTokenAmountInPool(trader, baseToken, fetchBase);\\n    }\\n\\n    /// @inheritdoc IOrderBook\\n    function getLiquidityCoefficientInFundingPayment(\\n        address trader,\\n        address baseToken,\\n        Funding.Growth memory fundingGrowthGlobal\\n    ) external view override returns (int256 liquidityCoefficientInFundingPayment) {\\n        bytes32[] memory orderIds = _openOrderIdsMap[trader][baseToken];\\n        mapping(int24 => Tick.GrowthInfo) storage tickMap = _growthOutsideTickMap[baseToken];\\n        address pool = IMarketRegistry(_marketRegistry).getPool(baseToken);\\n\\n        // funding of liquidity coefficient\\n        (, int24 tick, , , , , ) = UniswapV3Broker.getSlot0(pool);\\n        for (uint256 i = 0; i < orderIds.length; i++) {\\n            OpenOrder.Info memory order = _openOrderMap[orderIds[i]];\\n            Tick.FundingGrowthRangeInfo memory fundingGrowthRangeInfo =\\n                tickMap.getAllFundingGrowth(\\n                    order.lowerTick,\\n                    order.upperTick,\\n                    tick,\\n                    fundingGrowthGlobal.twPremiumX96,\\n                    fundingGrowthGlobal.twPremiumDivBySqrtPriceX96\\n                );\\n\\n            // the calculation here is based on cached values\\n            liquidityCoefficientInFundingPayment = liquidityCoefficientInFundingPayment.add(\\n                Funding.calcLiquidityCoefficientInFundingPaymentByOrder(order, fundingGrowthRangeInfo)\\n            );\\n        }\\n\\n        return liquidityCoefficientInFundingPayment;\\n    }\\n\\n    function getPendingFee(\\n        address trader,\\n        address baseToken,\\n        int24 lowerTick,\\n        int24 upperTick\\n    ) external view override returns (uint256) {\\n        (uint256 pendingFee, ) =\\n            _getPendingFeeAndFeeGrowthInsideX128ByOrder(\\n                baseToken,\\n                _openOrderMap[OpenOrder.calcOrderKey(trader, baseToken, lowerTick, upperTick)]\\n            );\\n        return pendingFee;\\n    }\\n\\n    //\\n    // PUBLIC VIEW\\n    //\\n\\n    function getTotalOrderDebt(\\n        address trader,\\n        address baseToken,\\n        bool fetchBase\\n    ) public view override returns (uint256) {\\n        uint256 totalOrderDebt;\\n        bytes32[] memory orderIds = _openOrderIdsMap[trader][baseToken];\\n        uint256 orderIdLength = orderIds.length;\\n        for (uint256 i = 0; i < orderIdLength; i++) {\\n            OpenOrder.Info memory orderInfo = _openOrderMap[orderIds[i]];\\n            uint256 orderDebt = fetchBase ? orderInfo.baseDebt : orderInfo.quoteDebt;\\n            totalOrderDebt = totalOrderDebt.add(orderDebt);\\n        }\\n        return totalOrderDebt;\\n    }\\n\\n    //\\n    // INTERNAL NON-VIEW\\n    //\\n\\n    function _removeLiquidity(InternalRemoveLiquidityParams memory params)\\n        internal\\n        returns (RemoveLiquidityResponse memory)\\n    {\\n        UniswapV3Broker.RemoveLiquidityResponse memory response =\\n            UniswapV3Broker.removeLiquidity(\\n                UniswapV3Broker.RemoveLiquidityParams(\\n                    params.pool,\\n                    _exchange,\\n                    params.lowerTick,\\n                    params.upperTick,\\n                    params.liquidity\\n                )\\n            );\\n\\n        // update token info based on existing open order\\n        (uint256 fee, uint256 baseDebt, uint256 quoteDebt) = _removeLiquidityFromOrder(params);\\n\\n        int256 takerBase = response.base.toInt256().sub(baseDebt.toInt256());\\n        int256 takerQuote = response.quote.toInt256().sub(quoteDebt.toInt256());\\n\\n        // if flipped from initialized to uninitialized, clear the tick info\\n        if (!UniswapV3Broker.getIsTickInitialized(params.pool, params.lowerTick)) {\\n            _growthOutsideTickMap[params.baseToken].clear(params.lowerTick);\\n        }\\n        if (!UniswapV3Broker.getIsTickInitialized(params.pool, params.upperTick)) {\\n            _growthOutsideTickMap[params.baseToken].clear(params.upperTick);\\n        }\\n\\n        return\\n            RemoveLiquidityResponse({\\n                base: response.base,\\n                quote: response.quote,\\n                fee: fee,\\n                takerBase: takerBase,\\n                takerQuote: takerQuote\\n            });\\n    }\\n\\n    function _removeLiquidityFromOrder(InternalRemoveLiquidityParams memory params)\\n        internal\\n        returns (\\n            uint256 fee,\\n            uint256 baseDebt,\\n            uint256 quoteDebt\\n        )\\n    {\\n        // update token info based on existing open order\\n        OpenOrder.Info storage openOrder = _openOrderMap[params.orderId];\\n\\n        // as in _addLiquidityToOrder(), fee should be calculated before the states are updated\\n        uint256 feeGrowthInsideX128;\\n        (fee, feeGrowthInsideX128) = _getPendingFeeAndFeeGrowthInsideX128ByOrder(params.baseToken, openOrder);\\n\\n        if (params.liquidity != 0) {\\n            if (openOrder.baseDebt != 0) {\\n                baseDebt = FullMath.mulDiv(openOrder.baseDebt, params.liquidity, openOrder.liquidity);\\n                openOrder.baseDebt = openOrder.baseDebt.sub(baseDebt);\\n            }\\n            if (openOrder.quoteDebt != 0) {\\n                quoteDebt = FullMath.mulDiv(openOrder.quoteDebt, params.liquidity, openOrder.liquidity);\\n                openOrder.quoteDebt = openOrder.quoteDebt.sub(quoteDebt);\\n            }\\n            openOrder.liquidity = openOrder.liquidity.sub(params.liquidity).toUint128();\\n        }\\n\\n        // after the fee is calculated, lastFeeGrowthInsideX128 can be updated if liquidity != 0 after removing\\n        if (openOrder.liquidity == 0) {\\n            _removeOrder(params.maker, params.baseToken, params.orderId);\\n        } else {\\n            openOrder.lastFeeGrowthInsideX128 = feeGrowthInsideX128;\\n        }\\n\\n        return (fee, baseDebt, quoteDebt);\\n    }\\n\\n    function _removeOrder(\\n        address maker,\\n        address baseToken,\\n        bytes32 orderId\\n    ) internal {\\n        bytes32[] storage orderIds = _openOrderIdsMap[maker][baseToken];\\n        uint256 orderLen = orderIds.length;\\n        for (uint256 idx = 0; idx < orderLen; idx++) {\\n            if (orderIds[idx] == orderId) {\\n                // found the existing order ID\\n                // remove it from the array efficiently by re-ordering and deleting the last element\\n                if (idx != orderLen - 1) {\\n                    orderIds[idx] = orderIds[orderLen - 1];\\n                }\\n                orderIds.pop();\\n                delete _openOrderMap[orderId];\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev this function is extracted from and only used by addLiquidity() to avoid stack too deep error\\n    function _addLiquidityToOrder(InternalAddLiquidityToOrderParams memory params) internal returns (uint256) {\\n        bytes32 orderId = OpenOrder.calcOrderKey(params.maker, params.baseToken, params.lowerTick, params.upperTick);\\n        // get the struct by key, no matter it's a new or existing order\\n        OpenOrder.Info storage openOrder = _openOrderMap[orderId];\\n\\n        // initialization for a new order\\n        if (openOrder.liquidity == 0) {\\n            bytes32[] storage orderIds = _openOrderIdsMap[params.maker][params.baseToken];\\n            // OB_ONE: orders number exceeds\\n            require(orderIds.length < IMarketRegistry(_marketRegistry).getMaxOrdersPerMarket(), \\\"OB_ONE\\\");\\n\\n            // state changes\\n            orderIds.push(orderId);\\n            openOrder.lowerTick = params.lowerTick;\\n            openOrder.upperTick = params.upperTick;\\n\\n            (, int24 tick, , , , , ) = UniswapV3Broker.getSlot0(params.pool);\\n            mapping(int24 => Tick.GrowthInfo) storage tickMap = _growthOutsideTickMap[params.baseToken];\\n            Tick.FundingGrowthRangeInfo memory fundingGrowthRangeInfo =\\n                tickMap.getAllFundingGrowth(\\n                    openOrder.lowerTick,\\n                    openOrder.upperTick,\\n                    tick,\\n                    params.globalFundingGrowth.twPremiumX96,\\n                    params.globalFundingGrowth.twPremiumDivBySqrtPriceX96\\n                );\\n            openOrder.lastTwPremiumGrowthInsideX96 = fundingGrowthRangeInfo.twPremiumGrowthInsideX96;\\n            openOrder.lastTwPremiumGrowthBelowX96 = fundingGrowthRangeInfo.twPremiumGrowthBelowX96;\\n            openOrder.lastTwPremiumDivBySqrtPriceGrowthInsideX96 = fundingGrowthRangeInfo\\n                .twPremiumDivBySqrtPriceGrowthInsideX96;\\n        }\\n\\n        // fee should be calculated before the states are updated, as for\\n        // - a new order, there is no fee accrued yet\\n        // - an existing order, fees accrued have to be settled before more liquidity is added\\n        (uint256 fee, uint256 feeGrowthInsideX128) =\\n            _getPendingFeeAndFeeGrowthInsideX128ByOrder(params.baseToken, openOrder);\\n\\n        // after the fee is calculated, liquidity & lastFeeGrowthInsideX128 can be updated\\n        openOrder.liquidity = openOrder.liquidity.add(params.liquidity).toUint128();\\n        openOrder.lastFeeGrowthInsideX128 = feeGrowthInsideX128;\\n        openOrder.baseDebt = openOrder.baseDebt.add(params.base);\\n        openOrder.quoteDebt = openOrder.quoteDebt.add(params.quote);\\n\\n        return fee;\\n    }\\n\\n    //\\n    // INTERNAL VIEW\\n    //\\n\\n    /// @return makerQuoteBalance includes maker fee\\n    function _getMakerQuoteBalanceAndPendingFee(\\n        address trader,\\n        address baseToken,\\n        bool fetchBase\\n    ) internal view returns (int256, uint256) {\\n        (uint256 totalBalanceFromOrders, uint256 pendingFee) = _getTotalTokenAmountInPool(trader, baseToken, fetchBase);\\n        uint256 totalOrderDebt = getTotalOrderDebt(trader, baseToken, fetchBase);\\n\\n        // makerBalance = totalTokenAmountInPool - totalOrderDebt\\n        return (totalBalanceFromOrders.toInt256().sub(totalOrderDebt.toInt256()), pendingFee);\\n    }\\n\\n    /// @dev Get total amount of the specified tokens in the specified pool.\\n    ///      Note:\\n    ///        1. when querying quote amount, it includes Exchange fees, i.e.:\\n    ///           quote amount = quote liquidity + fees\\n    ///           base amount = base liquidity\\n    ///        2. quote/base liquidity does NOT include Uniswap pool fees since\\n    ///           they do not have any impact to our margin system\\n    ///        3. the returned fee amount is only meaningful when querying quote amount\\n    function _getTotalTokenAmountInPool(\\n        address trader,\\n        address baseToken, // this argument is only for specifying which pool to get base or quote amounts\\n        bool fetchBase // true: fetch base amount, false: fetch quote amount\\n    ) internal view returns (uint256 tokenAmount, uint256 pendingFee) {\\n        bytes32[] memory orderIds = _openOrderIdsMap[trader][baseToken];\\n\\n        //\\n        // tick:    lower             upper\\n        //       -|---+-----------------+---|--\\n        //     case 1                    case 2\\n        //\\n        // if current price < upper tick, maker has base\\n        // case 1 : current price < lower tick\\n        //  --> maker only has base token\\n        //\\n        // if current price > lower tick, maker has quote\\n        // case 2 : current price > upper tick\\n        //  --> maker only has quote token\\n        (uint160 sqrtMarkPriceX96, , , , , , ) =\\n            UniswapV3Broker.getSlot0(IMarketRegistry(_marketRegistry).getPool(baseToken));\\n        uint256 orderIdLength = orderIds.length;\\n\\n        for (uint256 i = 0; i < orderIdLength; i++) {\\n            OpenOrder.Info memory order = _openOrderMap[orderIds[i]];\\n\\n            uint256 amount;\\n            {\\n                uint160 sqrtPriceAtLowerTick = TickMath.getSqrtRatioAtTick(order.lowerTick);\\n                uint160 sqrtPriceAtUpperTick = TickMath.getSqrtRatioAtTick(order.upperTick);\\n                if (fetchBase && sqrtMarkPriceX96 < sqrtPriceAtUpperTick) {\\n                    amount = LiquidityAmounts.getAmount0ForLiquidity(\\n                        sqrtMarkPriceX96 > sqrtPriceAtLowerTick ? sqrtMarkPriceX96 : sqrtPriceAtLowerTick,\\n                        sqrtPriceAtUpperTick,\\n                        order.liquidity\\n                    );\\n                } else if (!fetchBase && sqrtMarkPriceX96 > sqrtPriceAtLowerTick) {\\n                    amount = LiquidityAmounts.getAmount1ForLiquidity(\\n                        sqrtPriceAtLowerTick,\\n                        sqrtMarkPriceX96 < sqrtPriceAtUpperTick ? sqrtMarkPriceX96 : sqrtPriceAtUpperTick,\\n                        order.liquidity\\n                    );\\n                }\\n            }\\n            tokenAmount = tokenAmount.add(amount);\\n\\n            // get uncollected fee (only quote)\\n            if (!fetchBase) {\\n                (uint256 pendingFeeInOrder, ) = _getPendingFeeAndFeeGrowthInsideX128ByOrder(baseToken, order);\\n                pendingFee = pendingFee.add(pendingFeeInOrder);\\n            }\\n        }\\n        return (tokenAmount, pendingFee);\\n    }\\n\\n    /// @dev CANNOT use safeMath for feeGrowthInside calculation, as it can be extremely large and overflow\\n    ///      the difference between two feeGrowthInside, however, is correct and won't be affected by overflow or not\\n    function _getPendingFeeAndFeeGrowthInsideX128ByOrder(address baseToken, OpenOrder.Info memory order)\\n        internal\\n        view\\n        returns (uint256 pendingFee, uint256 feeGrowthInsideX128)\\n    {\\n        (, int24 tick, , , , , ) = UniswapV3Broker.getSlot0(IMarketRegistry(_marketRegistry).getPool(baseToken));\\n        mapping(int24 => Tick.GrowthInfo) storage tickMap = _growthOutsideTickMap[baseToken];\\n        feeGrowthInsideX128 = tickMap.getFeeGrowthInsideX128(\\n            order.lowerTick,\\n            order.upperTick,\\n            tick,\\n            _feeGrowthGlobalX128Map[baseToken]\\n        );\\n        pendingFee = FullMath.mulDiv(\\n            feeGrowthInsideX128 - order.lastFeeGrowthInsideX128,\\n            order.liquidity,\\n            FixedPoint128.Q128\\n        );\\n\\n        return (pendingFee, feeGrowthInsideX128);\\n    }\\n}\\n\",\"keccak256\":\"0x0de7d60e58c0f89a1309f54dbdcdc4a78c1fe1e9cac875bb83ce34774b363f62\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/ClearingHouseCallee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeOwnable } from \\\"./SafeOwnable.sol\\\";\\n\\nabstract contract ClearingHouseCallee is SafeOwnable {\\n    //\\n    // STATE\\n    //\\n    address internal _clearingHouse;\\n\\n    // __gap is reserved storage\\n    uint256[50] private __gap;\\n\\n    //\\n    // EVENT\\n    //\\n    event ClearingHouseChanged(address indexed clearingHouse);\\n\\n    //\\n    // CONSTRUCTOR\\n    //\\n\\n    // solhint-disable-next-line func-order\\n    function __ClearingHouseCallee_init() internal initializer {\\n        __SafeOwnable_init();\\n    }\\n\\n    function setClearingHouse(address clearingHouseArg) external onlyOwner {\\n        _clearingHouse = clearingHouseArg;\\n        emit ClearingHouseChanged(clearingHouseArg);\\n    }\\n\\n    function getClearingHouse() external view returns (address) {\\n        return _clearingHouse;\\n    }\\n\\n    function _requireOnlyClearingHouse() internal view {\\n        // only ClearingHouse\\n        require(_msgSender() == _clearingHouse, \\\"CHD_OCH\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9ec86e2f9d203e4fbe89382ff189167086ede1eed345533f2c254d61dc065e49\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { ContextUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nabstract contract SafeOwnable is ContextUpgradeable {\\n    address private _owner;\\n    address private _candidate;\\n\\n    // __gap is reserved storage\\n    uint256[50] private __gap;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        // caller not owner\\n        require(owner() == _msgSender(), \\\"SO_CNO\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __SafeOwnable_init() internal initializer {\\n        __Context_init();\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external virtual onlyOwner {\\n        // emitting event first to avoid caching values\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n        _candidate = address(0);\\n    }\\n\\n    /**\\n     * @dev Set ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function setOwner(address newOwner) external onlyOwner {\\n        // newOwner is 0\\n        require(newOwner != address(0), \\\"SO_NW0\\\");\\n        // same as original\\n        require(newOwner != _owner, \\\"SO_SAO\\\");\\n        // same as candidate\\n        require(newOwner != _candidate, \\\"SO_SAC\\\");\\n\\n        _candidate = newOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`_candidate`).\\n     * Can only be called by the new owner.\\n     */\\n    function updateOwner() external {\\n        // candidate is zero\\n        require(_candidate != address(0), \\\"SO_C0\\\");\\n        // caller is not candidate\\n        require(_candidate == _msgSender(), \\\"SO_CNC\\\");\\n\\n        // emitting event first to avoid caching values\\n        emit OwnershipTransferred(_owner, _candidate);\\n        _owner = _candidate;\\n        _candidate = address(0);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the candidate that can become the owner.\\n     */\\n    function candidate() external view returns (address) {\\n        return _candidate;\\n    }\\n}\\n\",\"keccak256\":\"0x23f33d992a804f208ff9f956eb7c5962630bd6b5b4d032a9bc6978f00851aae7\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/UniswapV3CallbackBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { ContextUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport { IUniswapV3Pool } from \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport { IMarketRegistry } from \\\"../interface/IMarketRegistry.sol\\\";\\n\\nabstract contract UniswapV3CallbackBridge is ContextUpgradeable {\\n    //\\n    // STATE\\n    //\\n    address internal _marketRegistry;\\n\\n    // __gap is reserved storage\\n    uint256[50] private __gap;\\n\\n    //\\n    // MODIFIER\\n    //\\n\\n    modifier checkCallback() {\\n        address pool = _msgSender();\\n        address baseToken = IUniswapV3Pool(pool).token0();\\n        // UCB_FCV: failed callback validation\\n        require(pool == IMarketRegistry(_marketRegistry).getPool(baseToken), \\\"UCB_FCV\\\");\\n        _;\\n    }\\n\\n    //\\n    // CONSTRUCTOR\\n    //\\n    // solhint-disable-next-line func-order\\n    function __UniswapV3CallbackBridge_init(address marketRegistryArg) internal initializer {\\n        __Context_init();\\n\\n        _marketRegistry = marketRegistryArg;\\n    }\\n\\n    function getMarketRegistry() external view returns (address) {\\n        return _marketRegistry;\\n    }\\n}\\n\",\"keccak256\":\"0x4f4cbb64d74756873ebf5162bc70d91c1ce88bce53e15e05b43208b7a34164fe\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interface/IMarketRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IMarketRegistry {\\n    struct MarketInfo {\\n        address pool;\\n        uint24 exchangeFeeRatio;\\n        uint24 uniswapFeeRatio;\\n        uint24 insuranceFundFeeRatio;\\n    }\\n\\n    event PoolAdded(address indexed baseToken, uint24 indexed feeRatio, address indexed pool);\\n\\n    event FeeRatioChanged(address baseToken, uint24 feeRatio);\\n\\n    event InsuranceFundFeeRatioChanged(uint24 feeRatio);\\n\\n    event MaxOrdersPerMarketChanged(uint8 maxOrdersPerMarket);\\n\\n    function addPool(address baseToken, uint24 feeRatio) external returns (address);\\n\\n    function setFeeRatio(address baseToken, uint24 feeRatio) external;\\n\\n    function setInsuranceFundFeeRatio(address baseToken, uint24 insuranceFundFeeRatioArg) external;\\n\\n    function setMaxOrdersPerMarket(uint8 maxOrdersPerMarketArg) external;\\n\\n    function getPool(address baseToken) external view returns (address);\\n\\n    function getFeeRatio(address baseToken) external view returns (uint24);\\n\\n    function getInsuranceFundFeeRatio(address baseToken) external view returns (uint24);\\n\\n    function getMarketInfo(address baseToken) external view returns (MarketInfo memory);\\n\\n    function getQuoteToken() external view returns (address);\\n\\n    function getUniswapV3Factory() external view returns (address);\\n\\n    function getMaxOrdersPerMarket() external view returns (uint8);\\n\\n    function hasPool(address baseToken) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x21c18c7abf96193d24c72efdc102e46d74e071dc71315a27996e750f9ffae1b3\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interface/IOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { Funding } from \\\"../lib/Funding.sol\\\";\\nimport { OpenOrder } from \\\"../lib/OpenOrder.sol\\\";\\n\\ninterface IOrderBook {\\n    struct AddLiquidityParams {\\n        address trader;\\n        address baseToken;\\n        uint256 base;\\n        uint256 quote;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        Funding.Growth fundingGrowthGlobal;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        address maker;\\n        address baseToken;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint128 liquidity;\\n    }\\n\\n    struct AddLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 fee;\\n        uint128 liquidity;\\n    }\\n\\n    struct RemoveLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        uint256 fee;\\n        int256 takerBase;\\n        int256 takerQuote;\\n    }\\n\\n    struct ReplaySwapParams {\\n        address baseToken;\\n        bool isBaseToQuote;\\n        bool shouldUpdateState;\\n        int256 amount;\\n        uint160 sqrtPriceLimitX96;\\n        uint24 exchangeFeeRatio;\\n        uint24 uniswapFeeRatio;\\n        Funding.Growth globalFundingGrowth;\\n    }\\n\\n    /// @param insuranceFundFee = fee * insuranceFundFeeRatio\\n    struct ReplaySwapResponse {\\n        int24 tick;\\n        uint256 fee;\\n        uint256 insuranceFundFee;\\n    }\\n\\n    struct MintCallbackData {\\n        address trader;\\n        address pool;\\n    }\\n\\n    /// @param exchange the address of exchange contract\\n    event ExchangeChanged(address indexed exchange);\\n\\n    function addLiquidity(AddLiquidityParams calldata params) external returns (AddLiquidityResponse memory);\\n\\n    function removeLiquidity(RemoveLiquidityParams calldata params) external returns (RemoveLiquidityResponse memory);\\n\\n    /// @dev this is the non-view version of getLiquidityCoefficientInFundingPayment()\\n    /// @return liquidityCoefficientInFundingPayment the funding payment of all orders/liquidity of a maker\\n    function updateFundingGrowthAndLiquidityCoefficientInFundingPayment(\\n        address trader,\\n        address baseToken,\\n        Funding.Growth memory fundingGrowthGlobal\\n    ) external returns (int256 liquidityCoefficientInFundingPayment);\\n\\n    function replaySwap(ReplaySwapParams memory params) external returns (ReplaySwapResponse memory);\\n\\n    function updateOrderDebt(\\n        bytes32 orderId,\\n        int256 base,\\n        int256 quote\\n    ) external;\\n\\n    function getOpenOrderIds(address trader, address baseToken) external view returns (bytes32[] memory);\\n\\n    function getOpenOrderById(bytes32 orderId) external view returns (OpenOrder.Info memory);\\n\\n    function getOpenOrder(\\n        address trader,\\n        address baseToken,\\n        int24 lowerTick,\\n        int24 upperTick\\n    ) external view returns (OpenOrder.Info memory);\\n\\n    function hasOrder(address trader, address[] calldata tokens) external view returns (bool);\\n\\n    function getTotalQuoteBalanceAndPendingFee(address trader, address[] calldata baseTokens)\\n        external\\n        view\\n        returns (int256 totalQuoteAmountInPools, uint256 totalPendingFee);\\n\\n    /// @dev the returned quote amount does not include funding payment because\\n    ///      the latter is counted directly toward realizedPnl.\\n    ///      the return value includes maker fee.\\n    ///      please refer to _getTotalTokenAmountInPool() docstring for specs\\n    function getTotalTokenAmountInPoolAndPendingFee(\\n        address trader,\\n        address baseToken,\\n        bool fetchBase\\n    ) external view returns (uint256 tokenAmount, uint256 totalPendingFee);\\n\\n    function getTotalOrderDebt(\\n        address trader,\\n        address baseToken,\\n        bool fetchBase\\n    ) external view returns (uint256);\\n\\n    /// @dev this is the view version of updateFundingGrowthAndLiquidityCoefficientInFundingPayment()\\n    /// @return liquidityCoefficientInFundingPayment the funding payment of all orders/liquidity of a maker\\n    function getLiquidityCoefficientInFundingPayment(\\n        address trader,\\n        address baseToken,\\n        Funding.Growth memory fundingGrowthGlobal\\n    ) external view returns (int256 liquidityCoefficientInFundingPayment);\\n\\n    function getPendingFee(\\n        address trader,\\n        address baseToken,\\n        int24 lowerTick,\\n        int24 upperTick\\n    ) external view returns (uint256);\\n\\n    function getExchange() external view returns (address);\\n}\\n\",\"keccak256\":\"0xe70c6f0afaf44a32c6f823090342c95515334c3113f772a8ec40ddc31092e3b0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/Funding.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { Tick } from \\\"./Tick.sol\\\";\\nimport { PerpMath } from \\\"./PerpMath.sol\\\";\\nimport { OpenOrder } from \\\"./OpenOrder.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { PerpFixedPoint96 } from \\\"./PerpFixedPoint96.sol\\\";\\nimport { TickMath } from \\\"@uniswap/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport { LiquidityAmounts } from \\\"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport { SignedSafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\\\";\\n\\nlibrary Funding {\\n    using PerpSafeCast for uint256;\\n    using PerpSafeCast for uint128;\\n    using SignedSafeMathUpgradeable for int256;\\n\\n    //\\n    // STRUCT\\n    //\\n\\n    /// @dev tw: time-weighted\\n    /// @param twPremiumX96 overflow inspection (as twPremiumX96 > twPremiumDivBySqrtPriceX96):\\n    //         max = 2 ^ (255 - 96) = 2 ^ 159 = 7.307508187E47\\n    //         assume premium = 10000, time = 10 year = 60 * 60 * 24 * 365 * 10 -> twPremium = 3.1536E12\\n    struct Growth {\\n        int256 twPremiumX96;\\n        int256 twPremiumDivBySqrtPriceX96;\\n    }\\n\\n    //\\n    // CONSTANT\\n    //\\n\\n    /// @dev block-based funding is calculated as: premium * timeFraction / 1 day, for 1 day as the default period\\n    int256 internal constant _DEFAULT_FUNDING_PERIOD = 1 days;\\n\\n    //\\n    // INTERNAL PURE\\n    //\\n\\n    function calcPendingFundingPaymentWithLiquidityCoefficient(\\n        int256 baseBalance,\\n        int256 twPremiumGrowthGlobalX96,\\n        Growth memory fundingGrowthGlobal,\\n        int256 liquidityCoefficientInFundingPayment\\n    ) internal pure returns (int256) {\\n        int256 balanceCoefficientInFundingPayment =\\n            PerpMath.mulDiv(\\n                baseBalance,\\n                fundingGrowthGlobal.twPremiumX96.sub(twPremiumGrowthGlobalX96),\\n                uint256(PerpFixedPoint96._IQ96)\\n            );\\n\\n        return\\n            liquidityCoefficientInFundingPayment.add(balanceCoefficientInFundingPayment).div(_DEFAULT_FUNDING_PERIOD);\\n    }\\n\\n    /// @dev the funding payment of an order/liquidity is composed of\\n    ///      1. funding accrued inside the range 2. funding accrued below the range\\n    ///      there is no funding when the price goes above the range, as liquidity is all swapped into quoteToken\\n    /// @return liquidityCoefficientInFundingPayment the funding payment of an order/liquidity\\n    function calcLiquidityCoefficientInFundingPaymentByOrder(\\n        OpenOrder.Info memory order,\\n        Tick.FundingGrowthRangeInfo memory fundingGrowthRangeInfo\\n    ) internal pure returns (int256) {\\n        uint160 sqrtPriceX96AtUpperTick = TickMath.getSqrtRatioAtTick(order.upperTick);\\n\\n        // base amount below the range\\n        uint256 baseAmountBelow =\\n            LiquidityAmounts.getAmount0ForLiquidity(\\n                TickMath.getSqrtRatioAtTick(order.lowerTick),\\n                sqrtPriceX96AtUpperTick,\\n                order.liquidity\\n            );\\n        // funding below the range\\n        int256 fundingBelowX96 =\\n            baseAmountBelow.toInt256().mul(\\n                fundingGrowthRangeInfo.twPremiumGrowthBelowX96.sub(order.lastTwPremiumGrowthBelowX96)\\n            );\\n\\n        // funding inside the range =\\n        // liquidity * (\\u0394twPremiumDivBySqrtPriceGrowthInsideX96 - \\u0394twPremiumGrowthInsideX96 / sqrtPriceAtUpperTick)\\n        int256 fundingInsideX96 =\\n            order.liquidity.toInt256().mul(\\n                // \\u0394twPremiumDivBySqrtPriceGrowthInsideX96\\n                fundingGrowthRangeInfo\\n                    .twPremiumDivBySqrtPriceGrowthInsideX96\\n                    .sub(order.lastTwPremiumDivBySqrtPriceGrowthInsideX96)\\n                    .sub(\\n                    // \\u0394twPremiumGrowthInsideX96\\n                    PerpMath.mulDiv(\\n                        fundingGrowthRangeInfo.twPremiumGrowthInsideX96.sub(order.lastTwPremiumGrowthInsideX96),\\n                        PerpFixedPoint96._IQ96,\\n                        sqrtPriceX96AtUpperTick\\n                    )\\n                )\\n            );\\n\\n        return fundingBelowX96.add(fundingInsideX96).div(PerpFixedPoint96._IQ96);\\n    }\\n}\\n\",\"keccak256\":\"0xb2a8216a5f124fdf438109a5c668361d59d93e9c106067d52d10b917680b0949\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/OpenOrder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary OpenOrder {\\n    /// @param lastFeeGrowthInsideX128 fees in quote token recorded in Exchange\\n    ///        because of block-based funding, quote-only and customized fee, all fees are in quote token\\n    struct Info {\\n        uint128 liquidity;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint256 lastFeeGrowthInsideX128;\\n        int256 lastTwPremiumGrowthInsideX96;\\n        int256 lastTwPremiumGrowthBelowX96;\\n        int256 lastTwPremiumDivBySqrtPriceGrowthInsideX96;\\n        uint256 baseDebt;\\n        uint256 quoteDebt;\\n    }\\n\\n    function calcOrderKey(\\n        address trader,\\n        address baseToken,\\n        int24 lowerTick,\\n        int24 upperTick\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(trader, baseToken, lowerTick, upperTick));\\n    }\\n}\\n\",\"keccak256\":\"0x322232d5d5cf358688eb0ece835a0e24a250211e37cdd2a2243792967604df0c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/PerpFixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary PerpFixedPoint96 {\\n    int256 internal constant _IQ96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x735971443673efb48c7da16a72016c53e03d087e60038325342e53a7634554f2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/PerpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { FixedPoint96 } from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport { FullMath } from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { SignedSafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\\\";\\n\\nlibrary PerpMath {\\n    using PerpSafeCast for int256;\\n    using SignedSafeMathUpgradeable for int256;\\n    using SafeMathUpgradeable for uint256;\\n\\n    function formatSqrtPriceX96ToPriceX96(uint160 sqrtPriceX96) internal pure returns (uint256) {\\n        return FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96);\\n    }\\n\\n    function formatX10_18ToX96(uint256 valueX10_18) internal pure returns (uint256) {\\n        return FullMath.mulDiv(valueX10_18, FixedPoint96.Q96, 1 ether);\\n    }\\n\\n    function formatX96ToX10_18(uint256 valueX96) internal pure returns (uint256) {\\n        return FullMath.mulDiv(valueX96, 1 ether, FixedPoint96.Q96);\\n    }\\n\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256) {\\n        return value >= 0 ? value.toUint256() : neg256(value).toUint256();\\n    }\\n\\n    function neg256(int256 a) internal pure returns (int256) {\\n        require(a > -2**255, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg256(uint256 a) internal pure returns (int256) {\\n        return -PerpSafeCast.toInt256(a);\\n    }\\n\\n    function neg128(int128 a) internal pure returns (int128) {\\n        require(a > -2**127, \\\"PerpMath: inversion overflow\\\");\\n        return -a;\\n    }\\n\\n    function neg128(uint128 a) internal pure returns (int128) {\\n        return -PerpSafeCast.toInt128(a);\\n    }\\n\\n    function divBy10_18(int256 value) internal pure returns (int256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function divBy10_18(uint256 value) internal pure returns (uint256) {\\n        // no overflow here\\n        return value / (1 ether);\\n    }\\n\\n    function mulRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\\n        return FullMath.mulDiv(value, ratio, 1e6);\\n    }\\n\\n    /// @param denominator cannot be 0 and is checked in FullMath.mulDiv()\\n    function mulDiv(\\n        int256 a,\\n        int256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        uint256 unsignedA = a < 0 ? uint256(neg256(a)) : uint256(a);\\n        uint256 unsignedB = b < 0 ? uint256(neg256(b)) : uint256(b);\\n        bool negative = ((a < 0 && b > 0) || (a > 0 && b < 0)) ? true : false;\\n\\n        uint256 unsignedResult = FullMath.mulDiv(unsignedA, unsignedB, denominator);\\n\\n        result = negative ? neg256(unsignedResult) : PerpSafeCast.toInt256(unsignedResult);\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x8bf80b34dcf03fb29e7edc88ddf451586285089ffd206156e962288ce457ee13\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/PerpSafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev copy from \\\"@openzeppelin/contracts-upgradeable/utils/SafeCastUpgradeable.sol\\\"\\n * and rename to avoid naming conflict with uniswap\\n */\\nlibrary PerpSafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128 returnValue) {\\n        require(((returnValue = uint128(value)) == value), \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64 returnValue) {\\n        require(((returnValue = uint64(value)) == value), \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32 returnValue) {\\n        require(((returnValue = uint32(value)) == value), \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16 returnValue) {\\n        require(((returnValue = uint16(value)) == value), \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8 returnValue) {\\n        require(((returnValue = uint8(value)) == value), \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 returnValue) {\\n        require(((returnValue = int128(value)) == value), \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 returnValue) {\\n        require(((returnValue = int64(value)) == value), \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 returnValue) {\\n        require(((returnValue = int32(value)) == value), \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 returnValue) {\\n        require(((returnValue = int16(value)) == value), \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 returnValue) {\\n        require(((returnValue = int8(value)) == value), \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from int256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0 and into 24 bit.\\n     */\\n    function toUint24(int256 value) internal pure returns (uint24 returnValue) {\\n        require(\\n            ((returnValue = uint24(value)) == value),\\n            \\\"SafeCast: value must be positive or value doesn't fit in an 24 bits\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 returnValue) {\\n        require(((returnValue = int24(value)) == value), \\\"SafeCast: value doesn't fit in an 24 bits\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6aba2cd6fe208ea413e3e087540ab092c2f3e9455e317de485bd82a81769e381\",\"license\":\"MIT\"},\"contracts/lib/Tick.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\nlibrary Tick {\\n    struct GrowthInfo {\\n        uint256 feeX128;\\n        int256 twPremiumX96;\\n        int256 twPremiumDivBySqrtPriceX96;\\n    }\\n\\n    struct FundingGrowthRangeInfo {\\n        int256 twPremiumGrowthInsideX96;\\n        int256 twPremiumGrowthBelowX96;\\n        int256 twPremiumDivBySqrtPriceGrowthInsideX96;\\n    }\\n\\n    /// @dev call this function only if (liquidityGrossBefore == 0 && liquidityDelta != 0)\\n    /// @dev per Uniswap: we assume that all growths before a tick is initialized happen \\\"below\\\" the tick\\n    function initialize(\\n        mapping(int24 => GrowthInfo) storage self,\\n        int24 tick,\\n        int24 currentTick,\\n        GrowthInfo memory globalGrowthInfo\\n    ) internal {\\n        if (tick <= currentTick) {\\n            GrowthInfo storage growthInfo = self[tick];\\n            growthInfo.feeX128 = globalGrowthInfo.feeX128;\\n            growthInfo.twPremiumX96 = globalGrowthInfo.twPremiumX96;\\n            growthInfo.twPremiumDivBySqrtPriceX96 = globalGrowthInfo.twPremiumDivBySqrtPriceX96;\\n        }\\n    }\\n\\n    function cross(\\n        mapping(int24 => GrowthInfo) storage self,\\n        int24 tick,\\n        GrowthInfo memory globalGrowthInfo\\n    ) internal {\\n        GrowthInfo storage growthInfo = self[tick];\\n        growthInfo.feeX128 = globalGrowthInfo.feeX128 - growthInfo.feeX128;\\n        growthInfo.twPremiumX96 = globalGrowthInfo.twPremiumX96 - growthInfo.twPremiumX96;\\n        growthInfo.twPremiumDivBySqrtPriceX96 =\\n            globalGrowthInfo.twPremiumDivBySqrtPriceX96 -\\n            growthInfo.twPremiumDivBySqrtPriceX96;\\n    }\\n\\n    function clear(mapping(int24 => GrowthInfo) storage self, int24 tick) internal {\\n        delete self[tick];\\n    }\\n\\n    /// @dev all values in this function are scaled by 2^128 (X128), thus adding the suffix to external params\\n    /// @return feeGrowthInsideX128 this value can underflow per Tick.feeGrowthOutside specs\\n    function getFeeGrowthInsideX128(\\n        mapping(int24 => GrowthInfo) storage self,\\n        int24 lowerTick,\\n        int24 upperTick,\\n        int24 currentTick,\\n        uint256 feeGrowthGlobalX128\\n    ) internal view returns (uint256 feeGrowthInsideX128) {\\n        uint256 lowerFeeGrowthOutside = self[lowerTick].feeX128;\\n        uint256 upperFeeGrowthOutside = self[upperTick].feeX128;\\n\\n        uint256 feeGrowthBelow =\\n            currentTick >= lowerTick ? lowerFeeGrowthOutside : feeGrowthGlobalX128 - lowerFeeGrowthOutside;\\n        uint256 feeGrowthAbove =\\n            currentTick < upperTick ? upperFeeGrowthOutside : feeGrowthGlobalX128 - upperFeeGrowthOutside;\\n\\n        return feeGrowthGlobalX128 - feeGrowthBelow - feeGrowthAbove;\\n    }\\n\\n    /// @return all values returned can underflow per feeGrowthOutside specs;\\n    ///         see https://www.notion.so/32990980ba8b43859f6d2541722a739b\\n    function getAllFundingGrowth(\\n        mapping(int24 => GrowthInfo) storage self,\\n        int24 lowerTick,\\n        int24 upperTick,\\n        int24 currentTick,\\n        int256 twPremiumGrowthGlobalX96,\\n        int256 twPremiumDivBySqrtPriceGrowthGlobalX96\\n    ) internal view returns (FundingGrowthRangeInfo memory) {\\n        GrowthInfo storage lowerTickGrowthInfo = self[lowerTick];\\n        GrowthInfo storage upperTickGrowthInfo = self[upperTick];\\n\\n        int256 lowerTwPremiumGrowthOutsideX96 = lowerTickGrowthInfo.twPremiumX96;\\n        int256 upperTwPremiumGrowthOutsideX96 = upperTickGrowthInfo.twPremiumX96;\\n\\n        FundingGrowthRangeInfo memory fundingGrowthRangeInfo;\\n        fundingGrowthRangeInfo.twPremiumGrowthBelowX96 = currentTick >= lowerTick\\n            ? lowerTwPremiumGrowthOutsideX96\\n            : twPremiumGrowthGlobalX96 - lowerTwPremiumGrowthOutsideX96;\\n        int256 twPremiumGrowthAboveX96 =\\n            currentTick < upperTick\\n                ? upperTwPremiumGrowthOutsideX96\\n                : twPremiumGrowthGlobalX96 - upperTwPremiumGrowthOutsideX96;\\n\\n        int256 lowerTwPremiumDivBySqrtPriceGrowthOutsideX96 = lowerTickGrowthInfo.twPremiumDivBySqrtPriceX96;\\n        int256 upperTwPremiumDivBySqrtPriceGrowthOutsideX96 = upperTickGrowthInfo.twPremiumDivBySqrtPriceX96;\\n\\n        int256 twPremiumDivBySqrtPriceGrowthBelowX96 =\\n            currentTick >= lowerTick\\n                ? lowerTwPremiumDivBySqrtPriceGrowthOutsideX96\\n                : twPremiumDivBySqrtPriceGrowthGlobalX96 - lowerTwPremiumDivBySqrtPriceGrowthOutsideX96;\\n        int256 twPremiumDivBySqrtPriceGrowthAboveX96 =\\n            currentTick < upperTick\\n                ? upperTwPremiumDivBySqrtPriceGrowthOutsideX96\\n                : twPremiumDivBySqrtPriceGrowthGlobalX96 - upperTwPremiumDivBySqrtPriceGrowthOutsideX96;\\n\\n        fundingGrowthRangeInfo.twPremiumGrowthInsideX96 =\\n            twPremiumGrowthGlobalX96 -\\n            fundingGrowthRangeInfo.twPremiumGrowthBelowX96 -\\n            twPremiumGrowthAboveX96;\\n        fundingGrowthRangeInfo.twPremiumDivBySqrtPriceGrowthInsideX96 =\\n            twPremiumDivBySqrtPriceGrowthGlobalX96 -\\n            twPremiumDivBySqrtPriceGrowthBelowX96 -\\n            twPremiumDivBySqrtPriceGrowthAboveX96;\\n\\n        return fundingGrowthRangeInfo;\\n    }\\n}\\n\",\"keccak256\":\"0xa369e2419b380038f5a3aa6179e10d7ca2465907dcda33f6ca6f97b18d129f98\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/UniswapV3Broker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { IUniswapV3Pool } from \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport { IUniswapV3Factory } from \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\nimport { TickMath } from \\\"@uniswap/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport { LiquidityAmounts } from \\\"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport { PoolAddress } from \\\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\\\";\\nimport { BitMath } from \\\"@uniswap/v3-core/contracts/libraries/BitMath.sol\\\";\\nimport { PerpSafeCast } from \\\"./PerpSafeCast.sol\\\";\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { PerpMath } from \\\"../lib/PerpMath.sol\\\";\\n\\n/**\\n * Uniswap's v3 pool: token0 & token1\\n * -> token0's price = token1 / token0; tick index = log(1.0001, token0's price)\\n * Our system: base & quote\\n * -> base's price = quote / base; tick index = log(1.0001, base price)\\n * Thus, we require that (base, quote) = (token0, token1) is always true for convenience\\n */\\nlibrary UniswapV3Broker {\\n    using SafeMathUpgradeable for uint256;\\n    using PerpMath for int256;\\n    using PerpMath for uint256;\\n    using PerpSafeCast for uint256;\\n    using PerpSafeCast for int256;\\n\\n    //\\n    // STRUCT\\n    //\\n\\n    struct AddLiquidityParams {\\n        address pool;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint256 base;\\n        uint256 quote;\\n        bytes data;\\n    }\\n\\n    struct AddLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n        uint128 liquidity;\\n    }\\n\\n    struct RemoveLiquidityParams {\\n        address pool;\\n        address recipient;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint128 liquidity;\\n    }\\n\\n    /// @param base amount of base token received from burning the liquidity (excl. fee)\\n    /// @param quote amount of quote token received from burning the liquidity (excl. fee)\\n    struct RemoveLiquidityResponse {\\n        uint256 base;\\n        uint256 quote;\\n    }\\n\\n    struct SwapState {\\n        int24 tick;\\n        uint160 sqrtPriceX96;\\n        int256 amountSpecifiedRemaining;\\n        uint256 feeGrowthGlobalX128;\\n        uint128 liquidity;\\n    }\\n\\n    struct SwapParams {\\n        address pool;\\n        address recipient;\\n        bool isBaseToQuote;\\n        bool isExactInput;\\n        uint256 amount;\\n        uint160 sqrtPriceLimitX96;\\n        bytes data;\\n    }\\n\\n    struct SwapResponse {\\n        uint256 base;\\n        uint256 quote;\\n    }\\n\\n    //\\n    // CONSTANT\\n    //\\n\\n    uint256 internal constant _DUST = 10;\\n\\n    //\\n    // INTERNAL NON-VIEW\\n    //\\n\\n    function addLiquidity(AddLiquidityParams memory params) internal returns (AddLiquidityResponse memory) {\\n        (uint160 sqrtMarkPrice, , , , , , ) = getSlot0(params.pool);\\n\\n        // get the equivalent amount of liquidity from amount0 & amount1 with current price\\n        uint128 liquidity =\\n            LiquidityAmounts.getLiquidityForAmounts(\\n                sqrtMarkPrice,\\n                TickMath.getSqrtRatioAtTick(params.lowerTick),\\n                TickMath.getSqrtRatioAtTick(params.upperTick),\\n                params.base,\\n                params.quote\\n            );\\n\\n        (uint256 addedAmount0, uint256 addedAmount1) =\\n            IUniswapV3Pool(params.pool).mint(address(this), params.lowerTick, params.upperTick, liquidity, params.data);\\n\\n        return AddLiquidityResponse({ base: addedAmount0, quote: addedAmount1, liquidity: liquidity });\\n    }\\n\\n    function removeLiquidity(RemoveLiquidityParams memory params) internal returns (RemoveLiquidityResponse memory) {\\n        // call burn(), which only updates tokensOwed instead of transferring the tokens\\n        (uint256 amount0Burned, uint256 amount1Burned) =\\n            IUniswapV3Pool(params.pool).burn(params.lowerTick, params.upperTick, params.liquidity);\\n\\n        // call collect() to transfer tokens to CH\\n        // we don't care about the returned values here as they include:\\n        // 1. every maker's fee in the same range (ClearingHouse is the only maker in the pool's perspective)\\n        // 2. the amount of token equivalent to liquidity burned\\n        IUniswapV3Pool(params.pool).collect(\\n            params.recipient,\\n            params.lowerTick,\\n            params.upperTick,\\n            type(uint128).max,\\n            type(uint128).max\\n        );\\n\\n        return RemoveLiquidityResponse({ base: amount0Burned, quote: amount1Burned });\\n    }\\n\\n    function swap(SwapParams memory params) internal returns (SwapResponse memory response) {\\n        // UniswapV3Pool uses the sign to determine isExactInput or not\\n        int256 specifiedAmount = params.isExactInput ? params.amount.toInt256() : params.amount.neg256();\\n\\n        // signedAmount0 & signedAmount1 are delta amounts, in the perspective of the pool\\n        // > 0: pool gets; user pays\\n        // < 0: pool provides; user gets\\n        (int256 signedAmount0, int256 signedAmount1) =\\n            IUniswapV3Pool(params.pool).swap(\\n                params.recipient,\\n                params.isBaseToQuote,\\n                specifiedAmount,\\n                params.sqrtPriceLimitX96 == 0\\n                    ? (params.isBaseToQuote ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\\n                    : params.sqrtPriceLimitX96,\\n                params.data\\n            );\\n\\n        (uint256 amount0, uint256 amount1) = (signedAmount0.abs(), signedAmount1.abs());\\n\\n        // isExactInput = true, isZeroForOne = true => exact token0\\n        // isExactInput = false, isZeroForOne = false => exact token0\\n        // isExactInput = false, isZeroForOne = true => exact token1\\n        // isExactInput = true, isZeroForOne = false => exact token1\\n        uint256 exactAmount = params.isExactInput == params.isBaseToQuote ? amount0 : amount1;\\n\\n        // if no price limit, require the full output amount as it's technically possible for amounts to not match\\n        // UB_UOA: unmatched output amount\\n        if (!params.isExactInput && params.sqrtPriceLimitX96 == 0) {\\n            require(\\n                (exactAmount > params.amount ? exactAmount.sub(params.amount) : params.amount.sub(exactAmount)) < _DUST,\\n                \\\"UB_UOA\\\"\\n            );\\n            return params.isBaseToQuote ? SwapResponse(amount0, params.amount) : SwapResponse(params.amount, amount1);\\n        }\\n\\n        return SwapResponse(amount0, amount1);\\n    }\\n\\n    //\\n    // INTERNAL VIEW\\n    //\\n\\n    function getPool(\\n        address factory,\\n        address quoteToken,\\n        address baseToken,\\n        uint24 uniswapFeeRatio\\n    ) internal view returns (address) {\\n        PoolAddress.PoolKey memory poolKeys = PoolAddress.getPoolKey(quoteToken, baseToken, uniswapFeeRatio);\\n        return IUniswapV3Factory(factory).getPool(poolKeys.token0, poolKeys.token1, uniswapFeeRatio);\\n    }\\n\\n    function getTickSpacing(address pool) internal view returns (int24 tickSpacing) {\\n        tickSpacing = IUniswapV3Pool(pool).tickSpacing();\\n    }\\n\\n    function getSlot0(address pool)\\n        internal\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        )\\n    {\\n        return IUniswapV3Pool(pool).slot0();\\n    }\\n\\n    function getTick(address pool) internal view returns (int24 tick) {\\n        (, tick, , , , , ) = IUniswapV3Pool(pool).slot0();\\n    }\\n\\n    function getIsTickInitialized(address pool, int24 tick) internal view returns (bool initialized) {\\n        (, , , , , , , initialized) = IUniswapV3Pool(pool).ticks(tick);\\n    }\\n\\n    function getTickLiquidityNet(address pool, int24 tick) internal view returns (int128 liquidityNet) {\\n        (, liquidityNet, , , , , , ) = IUniswapV3Pool(pool).ticks(tick);\\n    }\\n\\n    function getSqrtMarkPriceX96(address pool) internal view returns (uint160 sqrtMarkPrice) {\\n        (sqrtMarkPrice, , , , , , ) = IUniswapV3Pool(pool).slot0();\\n    }\\n\\n    /// @dev if twapInterval < 10 (should be less than 1 block), return mark price without twap directly,\\n    ///      as twapInterval is too short and makes getting twap over such a short period meaningless\\n    function getSqrtMarkTwapX96(address pool, uint32 twapInterval) internal view returns (uint160) {\\n        // return the current price as twapInterval is too short/ meaningless\\n        if (twapInterval < 10) {\\n            (uint160 sqrtMarkPrice, , , , , , ) = getSlot0(pool);\\n            return sqrtMarkPrice;\\n        }\\n        uint32[] memory secondsAgos = new uint32[](2);\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        secondsAgos[0] = twapInterval;\\n        secondsAgos[1] = 0;\\n        (int56[] memory tickCumulatives, ) = IUniswapV3Pool(pool).observe(secondsAgos);\\n\\n        // tick(imprecise as it's an integer) to price\\n        return TickMath.getSqrtRatioAtTick(int24((tickCumulatives[1] - tickCumulatives[0]) / twapInterval));\\n    }\\n\\n    // copied from UniswapV3-core\\n    /// @param isBaseToQuote originally lte, meaning that the next tick < the current tick\\n    function getNextInitializedTickWithinOneWord(\\n        address pool,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool isBaseToQuote\\n    ) internal view returns (int24 next, bool initialized) {\\n        int24 compressed = tick / tickSpacing;\\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\\n\\n        if (isBaseToQuote) {\\n            (int16 wordPos, uint8 bitPos) = _getPositionOfInitializedTickWithinOneWord(compressed);\\n            // all the 1s at or to the right of the current bitPos\\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\\n            uint256 masked = _getTickBitmap(pool, wordPos) & mask;\\n\\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed - int24(bitPos - BitMath.mostSignificantBit(masked))) * tickSpacing\\n                : (compressed - int24(bitPos)) * tickSpacing;\\n        } else {\\n            // start from the word of the next tick, since the current tick state doesn't matter\\n            (int16 wordPos, uint8 bitPos) = _getPositionOfInitializedTickWithinOneWord(compressed + 1);\\n            // all the 1s at or to the left of the bitPos\\n            uint256 mask = ~((1 << bitPos) - 1);\\n            uint256 masked = _getTickBitmap(pool, wordPos) & mask;\\n\\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed + 1 + int24(BitMath.leastSignificantBit(masked) - bitPos)) * tickSpacing\\n                : (compressed + 1 + int24(type(uint8).max - bitPos)) * tickSpacing;\\n        }\\n    }\\n\\n    function getSwapState(\\n        address pool,\\n        int256 signedScaledAmountForReplaySwap,\\n        uint256 feeGrowthGlobalX128\\n    ) internal view returns (SwapState memory) {\\n        (uint160 sqrtMarkPrice, int24 tick, , , , , ) = getSlot0(pool);\\n        uint128 liquidity = IUniswapV3Pool(pool).liquidity();\\n        return\\n            SwapState({\\n                tick: tick,\\n                sqrtPriceX96: sqrtMarkPrice,\\n                amountSpecifiedRemaining: signedScaledAmountForReplaySwap,\\n                feeGrowthGlobalX128: feeGrowthGlobalX128,\\n                liquidity: liquidity\\n            });\\n    }\\n\\n    //\\n    // PRIVATE VIEW\\n    //\\n\\n    function _getTickBitmap(address pool, int16 wordPos) private view returns (uint256 tickBitmap) {\\n        return IUniswapV3Pool(pool).tickBitmap(wordPos);\\n    }\\n\\n    /// @dev this function is Uniswap's TickBitmap.position()\\n    function _getPositionOfInitializedTickWithinOneWord(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\\n        wordPos = int16(tick >> 8);\\n        bitPos = uint8(tick % 256);\\n    }\\n}\\n\",\"keccak256\":\"0x21e9c2ac951f9d80d7665e0cfa8c36216b6770934389838355f7002c79b6fd91\",\"license\":\"GPL-2.0-or-later\"},\"contracts/storage/OrderBookStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\nimport { Tick } from \\\"../lib/Tick.sol\\\";\\nimport { Funding } from \\\"../lib/Funding.sol\\\";\\nimport { OpenOrder } from \\\"../lib/OpenOrder.sol\\\";\\n\\n/// @notice For future upgrades, do not change OrderBookStorageV1. Create a new\\n/// contract which implements OrderBookStorageV1 and following the naming convention\\n/// OrderBookStorageVX.\\nabstract contract OrderBookStorageV1 {\\n    address internal _exchange;\\n\\n    // first key: trader, second key: base token\\n    mapping(address => mapping(address => bytes32[])) internal _openOrderIdsMap;\\n\\n    // key: openOrderId\\n    mapping(bytes32 => OpenOrder.Info) internal _openOrderMap;\\n\\n    // first key: base token, second key: tick index\\n    // value: the accumulator of **Tick.GrowthInfo** outside each tick of each pool\\n    mapping(address => mapping(int24 => Tick.GrowthInfo)) internal _growthOutsideTickMap;\\n\\n    // key: base token\\n    // value: the global accumulator of **quote fee transformed from base fee** of each pool\\n    mapping(address => uint256) internal _feeGrowthGlobalX128Map;\\n}\\n\",\"keccak256\":\"0xaf79bfd2b1cfb99e6c2cae99967670661b7954ecf744af965ba684885f731b14\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
    "bytecode": "",
    "deployedBytecode": "",
    "devdoc": {
      "kind": "dev",
      "methods": {
        "candidate()": {
          "details": "Returns the candidate that can become the owner."
        },
        "getLiquidityCoefficientInFundingPayment(address,address,(int256,int256))": {
          "details": "this is the view version of updateFundingGrowthAndLiquidityCoefficientInFundingPayment()",
          "returns": {
            "liquidityCoefficientInFundingPayment": "the funding payment of all orders/liquidity of a maker"
          }
        },
        "getTotalTokenAmountInPoolAndPendingFee(address,address,bool)": {
          "details": "the returned quote amount does not include funding payment because      the latter is counted directly toward realizedPnl.      the return value includes maker fee.      please refer to _getTotalTokenAmountInPool() docstring for specs"
        },
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
        },
        "setOwner(address)": {
          "details": "Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        },
        "uniswapV3MintCallback(uint256,uint256,bytes)": {
          "details": "In the implementation you must pay the pool tokens owed for the minted liquidity. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.",
          "params": {
            "amount0Owed": "The amount of token0 due to the pool for the minted liquidity",
            "amount1Owed": "The amount of token1 due to the pool for the minted liquidity",
            "data": "Any data passed through by the caller via the IUniswapV3PoolActions#mint call"
          }
        },
        "updateFundingGrowthAndLiquidityCoefficientInFundingPayment(address,address,(int256,int256))": {
          "details": "this is the non-view version of getLiquidityCoefficientInFundingPayment()",
          "returns": {
            "liquidityCoefficientInFundingPayment": "the funding payment of all orders/liquidity of a maker"
          }
        },
        "updateOwner()": {
          "details": "Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner."
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "uniswapV3MintCallback(uint256,uint256,bytes)": {
          "notice": "Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint."
        }
      },
      "version": 1
    },
    "storageLayout": {
      "storage": [
        {
          "astId": 1039,
          "contract": "contracts/OrderBook.sol:OrderBook",
          "label": "_initialized",
          "offset": 0,
          "slot": "0",
          "type": "t_bool"
        },
        {
          "astId": 1042,
          "contract": "contracts/OrderBook.sol:OrderBook",
          "label": "_initializing",
          "offset": 1,
          "slot": "0",
          "type": "t_bool"
        },
        {
          "astId": 2356,
          "contract": "contracts/OrderBook.sol:OrderBook",
          "label": "__gap",
          "offset": 0,
          "slot": "1",
          "type": "t_array(t_uint256)50_storage"
        },
        {
          "astId": 20487,
          "contract": "contracts/OrderBook.sol:OrderBook",
          "label": "_owner",
          "offset": 0,
          "slot": "51",
          "type": "t_address"
        },
        {
          "astId": 20489,
          "contract": "contracts/OrderBook.sol:OrderBook",
          "label": "_candidate",
          "offset": 0,
          "slot": "52",
          "type": "t_address"
        },
        {
          "astId": 20493,
          "contract": "contracts/OrderBook.sol:OrderBook",
          "label": "__gap",
          "offset": 0,
          "slot": "53",
          "type": "t_array(t_uint256)50_storage"
        },
        {
          "astId": 20358,
          "contract": "contracts/OrderBook.sol:OrderBook",
          "label": "_clearingHouse",
          "offset": 0,
          "slot": "103",
          "type": "t_address"
        },
        {
          "astId": 20362,
          "contract": "contracts/OrderBook.sol:OrderBook",
          "label": "__gap",
          "offset": 0,
          "slot": "104",
          "type": "t_array(t_uint256)50_storage"
        },
        {
          "astId": 20677,
          "contract": "contracts/OrderBook.sol:OrderBook",
          "label": "_marketRegistry",
          "offset": 0,
          "slot": "154",
          "type": "t_address"
        },
        {
          "astId": 20681,
          "contract": "contracts/OrderBook.sol:OrderBook",
          "label": "__gap",
          "offset": 0,
          "slot": "155",
          "type": "t_array(t_uint256)50_storage"
        },
        {
          "astId": 24765,
          "contract": "contracts/OrderBook.sol:OrderBook",
          "label": "_exchange",
          "offset": 0,
          "slot": "205",
          "type": "t_address"
        },
        {
          "astId": 24772,
          "contract": "contracts/OrderBook.sol:OrderBook",
          "label": "_openOrderIdsMap",
          "offset": 0,
          "slot": "206",
          "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_bytes32)dyn_storage))"
        },
        {
          "astId": 24776,
          "contract": "contracts/OrderBook.sol:OrderBook",
          "label": "_openOrderMap",
          "offset": 0,
          "slot": "207",
          "type": "t_mapping(t_bytes32,t_struct(Info)22321_storage)"
        },
        {
          "astId": 24782,
          "contract": "contracts/OrderBook.sol:OrderBook",
          "label": "_growthOutsideTickMap",
          "offset": 0,
          "slot": "208",
          "type": "t_mapping(t_address,t_mapping(t_int24,t_struct(GrowthInfo)23454_storage))"
        },
        {
          "astId": 24786,
          "contract": "contracts/OrderBook.sol:OrderBook",
          "label": "_feeGrowthGlobalX128Map",
          "offset": 0,
          "slot": "209",
          "type": "t_mapping(t_address,t_uint256)"
        }
      ],
      "types": {
        "t_address": {
          "encoding": "inplace",
          "label": "address",
          "numberOfBytes": "20"
        },
        "t_array(t_bytes32)dyn_storage": {
          "base": "t_bytes32",
          "encoding": "dynamic_array",
          "label": "bytes32[]",
          "numberOfBytes": "32"
        },
        "t_array(t_uint256)50_storage": {
          "base": "t_uint256",
          "encoding": "inplace",
          "label": "uint256[50]",
          "numberOfBytes": "1600"
        },
        "t_bool": {
          "encoding": "inplace",
          "label": "bool",
          "numberOfBytes": "1"
        },
        "t_bytes32": {
          "encoding": "inplace",
          "label": "bytes32",
          "numberOfBytes": "32"
        },
        "t_int24": {
          "encoding": "inplace",
          "label": "int24",
          "numberOfBytes": "3"
        },
        "t_int256": {
          "encoding": "inplace",
          "label": "int256",
          "numberOfBytes": "32"
        },
        "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => bytes32[])",
          "numberOfBytes": "32",
          "value": "t_array(t_bytes32)dyn_storage"
        },
        "t_mapping(t_address,t_mapping(t_address,t_array(t_bytes32)dyn_storage))": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => mapping(address => bytes32[]))",
          "numberOfBytes": "32",
          "value": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
        },
        "t_mapping(t_address,t_mapping(t_int24,t_struct(GrowthInfo)23454_storage))": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => mapping(int24 => struct Tick.GrowthInfo))",
          "numberOfBytes": "32",
          "value": "t_mapping(t_int24,t_struct(GrowthInfo)23454_storage)"
        },
        "t_mapping(t_address,t_uint256)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => uint256)",
          "numberOfBytes": "32",
          "value": "t_uint256"
        },
        "t_mapping(t_bytes32,t_struct(Info)22321_storage)": {
          "encoding": "mapping",
          "key": "t_bytes32",
          "label": "mapping(bytes32 => struct OpenOrder.Info)",
          "numberOfBytes": "32",
          "value": "t_struct(Info)22321_storage"
        },
        "t_mapping(t_int24,t_struct(GrowthInfo)23454_storage)": {
          "encoding": "mapping",
          "key": "t_int24",
          "label": "mapping(int24 => struct Tick.GrowthInfo)",
          "numberOfBytes": "32",
          "value": "t_struct(GrowthInfo)23454_storage"
        },
        "t_struct(GrowthInfo)23454_storage": {
          "encoding": "inplace",
          "label": "struct Tick.GrowthInfo",
          "members": [
            {
              "astId": 23449,
              "contract": "contracts/OrderBook.sol:OrderBook",
              "label": "feeX128",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256"
            },
            {
              "astId": 23451,
              "contract": "contracts/OrderBook.sol:OrderBook",
              "label": "twPremiumX96",
              "offset": 0,
              "slot": "1",
              "type": "t_int256"
            },
            {
              "astId": 23453,
              "contract": "contracts/OrderBook.sol:OrderBook",
              "label": "twPremiumDivBySqrtPriceX96",
              "offset": 0,
              "slot": "2",
              "type": "t_int256"
            }
          ],
          "numberOfBytes": "96"
        },
        "t_struct(Info)22321_storage": {
          "encoding": "inplace",
          "label": "struct OpenOrder.Info",
          "members": [
            {
              "astId": 22304,
              "contract": "contracts/OrderBook.sol:OrderBook",
              "label": "liquidity",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128"
            },
            {
              "astId": 22306,
              "contract": "contracts/OrderBook.sol:OrderBook",
              "label": "lowerTick",
              "offset": 16,
              "slot": "0",
              "type": "t_int24"
            },
            {
              "astId": 22308,
              "contract": "contracts/OrderBook.sol:OrderBook",
              "label": "upperTick",
              "offset": 19,
              "slot": "0",
              "type": "t_int24"
            },
            {
              "astId": 22310,
              "contract": "contracts/OrderBook.sol:OrderBook",
              "label": "lastFeeGrowthInsideX128",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256"
            },
            {
              "astId": 22312,
              "contract": "contracts/OrderBook.sol:OrderBook",
              "label": "lastTwPremiumGrowthInsideX96",
              "offset": 0,
              "slot": "2",
              "type": "t_int256"
            },
            {
              "astId": 22314,
              "contract": "contracts/OrderBook.sol:OrderBook",
              "label": "lastTwPremiumGrowthBelowX96",
              "offset": 0,
              "slot": "3",
              "type": "t_int256"
            },
            {
              "astId": 22316,
              "contract": "contracts/OrderBook.sol:OrderBook",
              "label": "lastTwPremiumDivBySqrtPriceGrowthInsideX96",
              "offset": 0,
              "slot": "4",
              "type": "t_int256"
            },
            {
              "astId": 22318,
              "contract": "contracts/OrderBook.sol:OrderBook",
              "label": "baseDebt",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256"
            },
            {
              "astId": 22320,
              "contract": "contracts/OrderBook.sol:OrderBook",
              "label": "quoteDebt",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256"
            }
          ],
          "numberOfBytes": "224"
        },
        "t_uint128": {
          "encoding": "inplace",
          "label": "uint128",
          "numberOfBytes": "16"
        },
        "t_uint256": {
          "encoding": "inplace",
          "label": "uint256",
          "numberOfBytes": "32"
        }
      }
    }
  }